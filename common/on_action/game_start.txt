# Empty scope
on_game_start = {
	events = {
		fp1_scandinavian_adventurers.0004	# FP1 - Organise Norse adventurers.
		# fp1_scandinavian_adventurers.0011	# FP1 - Corral famous Norse adventurers that haven't done much yet.
		# fp1_scandinavian_adventurers.0021	# FP1 - Mark game-start prioritised adventurers.
		#Guaranteed historical artifacts fixed spawning
		debug_portraits.1 					# Debug portraits for animation testing
		# easteregg_event.0001				# Charna and Jakub duel.
	}
	
	effect = {
		#Epidemics 3 months grace
		set_global_variable = {
			name = start_epidemic_grace
			value = yes
			months = 3
		}
		### CORONATION LOCATION SETUP ###
		if = {
			limit = {
				current_date >= 976.8.10
				has_dlc_feature = coronations
			}
			# Glanys (Battanian) ## CK_ACH TEMPORARY
			province:296 = { 
				add_province_modifier = coronation_tradition_modifier 
				set_variable = {
					name = coronation_tradition_location
					value = 5
				}
			}
			# Palace District of Lycaron (Calradians) ## CK_ACH TEMPORARY
			province:903 = { 
				add_province_modifier = coronation_tradition_modifier 
				set_variable = {
					name = coronation_tradition_location
					value = 5
				}
			}
			# # Reims (France)
			# province:2390 = { 
			# 	add_province_modifier = coronation_tradition_modifier 
			# 	set_variable = {
			# 		name = coronation_tradition_location
			# 		value = 5
			# 	}
			# }
			# # Rome (Italy)
			# province:2575 = { 
			# 	add_province_modifier = coronation_tradition_modifier 
			# 	set_variable = {
			# 		name = coronation_tradition_location
			# 		value = 5
			# 	}
			# }
			# # Milan (Italy)
			# province:2482 = { 
			# 	add_province_modifier = coronation_tradition_modifier 
			# 	set_variable = {
			# 		name = coronation_tradition_location
			# 		value = 5
			# 	}
			# }
			# # Gniezno (Poland)
			# province:4905 = { 
			# 	add_province_modifier = coronation_tradition_modifier 
			# 	set_variable = {
			# 		name = coronation_tradition_location
			# 		value = 5
			# 	}
			# }
			# # Szekesfehervar (Hungary)
			# province:3805 = { 
			# 	add_province_modifier = coronation_tradition_modifier 
			# 	set_variable = {
			# 		name = coronation_tradition_location
			# 		value = 5
			# 	}
			# }
			# # Scone Abbey, Gowrie (Scotland)
			# province:1741 = { 
			# 	add_province_modifier = coronation_tradition_modifier 
			# 	set_variable = {
			# 		name = coronation_tradition_location
			# 		value = 5
			# 	}
			# }
			# # Byzantium (Byzantines)
			# province:496 = { 
			# 	add_province_modifier = coronation_long_tradition_modifier 
			# 	set_variable = {
			# 		name = coronation_tradition_location
			# 		value = 10
			# 	}
			# }
			# # Mahdiya (Africa)
			# province:4578 = { 
			# 	add_province_modifier = coronation_tradition_modifier 
			# 	set_variable = {
			# 		name = coronation_tradition_location
			# 		value = 5
			# 	}
			# }
			# # Cairo (Egypt)
			# province:6042 = { 
			# 	add_province_modifier = coronation_tradition_modifier 
			# 	set_variable = {
			# 		name = coronation_tradition_location
			# 		value = 5
			# 	}
			# }
			# # Damascus (Syria)
			# province:5924 = { 
			# 	add_province_modifier = coronation_tradition_modifier 
			# 	set_variable = {
			# 		name = coronation_tradition_location
			# 		value = 5
			# 	}
			# }
			# # Baghdad (Mesopotamia)
			# province:4828 = { 
			# 	add_province_modifier = coronation_long_tradition_modifier 
			# 	set_variable = {
			# 		name = coronation_tradition_location
			# 		value = 10
			# 	}
			# }
			# # Rayy (Persia)
			# province:4319 = { 
			# 	add_province_modifier = coronation_tradition_modifier 
			# 	set_variable = {
			# 		name = coronation_tradition_location
			# 		value = 5
			# 	}
			# }
			# # Ghazna (Kabulistan)
			# province:4500 = { 
			# 	add_province_modifier = coronation_tradition_modifier 
			# 	set_variable = {
			# 		name = coronation_tradition_location
			# 		value = 5
			# 	}
			# }
			# # Lahur (Punjab)
			# province:1362 = { 
			# 	add_province_modifier = coronation_tradition_modifier 
			# 	set_variable = {
			# 		name = coronation_tradition_location
			# 		value = 5
			# 	}
			# }
			# # Samarkand (Transoxiana)
			# province:4404 = { 
			# 	add_province_modifier = coronation_tradition_modifier 
			# 	set_variable = {
			# 		name = coronation_tradition_location
			# 		value = 5
			# 	}
			# }
			# # Bukhara (Transoxiana)
			# province:4394 = { 
			# 	add_province_modifier = coronation_tradition_modifier 
			# 	set_variable = {
			# 		name = coronation_tradition_location
			# 		value = 5
			# 	}
			# }
			# # Medina (Arabia)
			# province:6212 = { 
			# 	add_province_modifier = coronation_tradition_modifier 
			# 	set_variable = {
			# 		name = coronation_tradition_location
			# 		value = 5
			# 	}
			# }
			# # Kutaisi (Georgia)
			# province:601 = { 
			# 	add_province_modifier = coronation_tradition_modifier 
			# 	set_variable = {
			# 		name = coronation_tradition_location
			# 		value = 5
			# 	}
			# }
		}
		# if = {
		# 	limit = {
		# 		current_date >= 1178.1.1
		# 		has_dlc_feature = coronations
		# 	}
		# 	# Marrakesh (Maghreb)
		# 	province:4718 = { 
		# 		add_province_modifier = coronation_tradition_modifier 
		# 		set_variable = {
		# 			name = coronation_tradition_location
		# 			value = 5
		# 		}
		# 	}
		# 	# Karakorum (Mongolia)
		# 	province:1457 = { 
		# 		add_province_modifier = coronation_tradition_modifier 
		# 		set_variable = {
		# 			name = coronation_tradition_location
		# 			value = 5
		# 		}
		# 	}
		# }

		### Every nomad and herder in the Steppe Region becomes tribal if DLC not enabled, pre-lobby history setup ###
		if = {
			limit = {
				has_mpo_dlc_trigger = no
			}
			# Change Nomad and Herder Holdings to Tribal Holdings for Tribals
			every_province = {
				limit = {
					OR = {
						has_holding_type = nomad_holding
						has_holding_type = herder_holding
					}
				}
				set_holding_type = tribal_holding
				county.holder ?= {
					if = {
						limit = {
							NOT = {
								has_government = tribal_government
							}
						}
						change_government = tribal_government
					}
				}
			}
		}

		setup_tributaries_effect = yes # defined in 00_tributary_setup_effect.txt
		

		if = {
			limit = {
				has_game_rule = ck_shatter_khanate
			}
			shatter_khanate_effect = yes
			make_khuzait_khanate_nomadic_effect = yes
		}
		if = {
			limit = {
				has_game_rule = ck_shatter_khanate_duchies
			}
			shatter_khanate_duchies_effect = yes
			shatter_khanate_effect = yes
			make_khuzait_khanate_nomadic_effect = yes
		}
		# Makes sure Battania & Sturgia are NOT feudal #
		if = {
			limit = {
				AND = {
					game_start_date <= 1084.5.1
					OR = {
						exists = title:k_battania.holder
						exists = title:e_grand_principality_of_sturgia.holder
					}
				}
			}
			title:k_battania.holder = {
				every_vassal_or_below = {
					limit = {
						has_government = feudal_government
					}
					change_government = tribal_government
				}
			}
			title:e_grand_principality_of_sturgia.holder = {
				every_vassal_or_below = {
					limit = {
						has_government = feudal_government
					}
					change_government = tribal_government
				}
			}
		}

		### RELIGIOUS THINGS ###
		# Set up Holy Site Buildings to be buildable in Holy Sites
		religion:aserai_religion = {
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_mosque_01
					}
				}
			}
		}
		religion:calradian_religion = {
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_cathedral_01
					}
				}
			}
		}
		religion:darshi_religion = {
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_fire_temple_01
					}
				}
			}
		}
		every_religion_global = {
			limit = {
				# OR = {
					this = religion:ghavati_religion
					# this = religion:buddhism_religion
				# }
			}
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_indian_grand_temple_01
					}
				}
			}
		}
		every_religion_global = {
			limit = {
				is_in_family = rf_pagan
			}
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_pagan_grand_temple_01
					}
				}
			}
		}
		every_religion_global = {
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_other_grand_temple_01
					}
				}
			}
		}

		# No Mecca

		# Pagans that start pre-reformed (TO;DO)

		
		faith:darusan = {
			set_variable = { name = block_conversion_till_decision_taken }
		}
		faith:sarranid_faith = {
			set_variable = { name = block_conversion_till_nebulous_circumstances }
		}

		## THEO, ADD THE FAITHS FOR WARBAND DOWN BELOW ##
		if = {
			limit = {
				game_start_date <= 1084.5.1 ## CHANGE DAY AND MONTH WHEN WE DETERMINE THAT IN THE FUTURE
			}
			faith:krevmetiqstvo = {
				set_variable = { name = block_conversion_till_warband }
			}
		}
		
		### 1257 CRUSADE SETUP ###
		if = {
			limit = {
				game_start_date >= 1257.3.23
			}
			religion:aserai_religion = {
				set_variable = {
					name = variable_ghw_unlocked
					value = yes
				}
			}
			religion:calradian_religion = {
				set_variable = {
					name = variable_ghw_unlocked
					value = yes
				}
			}
			set_global_variable = {
				name = had_first_catholic_crusade
				value = yes
			}
		}
		
		### CALRADIC KINGS - UNIVERSITIES ###
		title:b_charas.title_province = { 
			if = {
				limit = {
					NOT = {
						has_special_building_slot = yes
					}
				}
				add_special_building_slot = generic_university
			}
		}
		title:b_ortysia.title_province = { 
			if = {
				limit = {
					NOT = {
						has_special_building_slot = yes
					}
				}
				add_special_building_slot = generic_university
			}
		}
		title:b_pravend.title_province = { 
			if = {
				limit = {
					NOT = {
						has_special_building_slot = yes
					}
				}
				add_special_building_slot = generic_university
			}
		}
		title:b_lycaron.title_province = { 
			if = {
				limit = {
					NOT = {
						has_special_building_slot = yes
					}
				}
				add_special_building_slot = generic_university
			}
		}
		title:b_sanala.title_province = { 
			if = {
				limit = {
					NOT = {
						has_special_building_slot = yes
					}
				}
				add_special_building_slot = generic_university
			}
		}
		title:b_razih.title_province = { 
			if = {
				limit = {
					NOT = {
						has_special_building_slot = yes
					}
				}
				add_special_building_slot = generic_university
			}
		}
		
		## Non-Standard COAs at 976 game start ##
		# Vlandian CoAs #
		if = {
			limit = {
				game_start_date >= 976.8.10
			}
			# Change Vlandian from Calradian CoA to Vlandian variant
			title:c_pravend = { set_coa = c_pravend_vlandian }
		}
		## Minor Clan COA's ##
		if = {
			limit = {
				game_start_date >= 1084.5.1
			}
			title:d_laamp_embers = { set_coa = laamp_embers }
			title:d_laamp_boar = { set_coa = laamp_boars }
			title:d_laamp_vaegirs = { set_coa = laamp_vaegirs }
			title:d_laamp_barcel = { set_coa = d_laamp_barcel }
			title:d_laamp_brotherhood = { set_coa = laamp_brotherhood_coa }
			title:d_laamp_hand = { set_coa = laamp_hand_coa }
			title:d_laamp_skold = { set_coa = laamp_skold_coa }
			title:d_laamp_legion = { set_coa = laamp_legion_coa }
			title:d_laamp_wolfskins = { set_coa = laamp_wolfskins_coa }
			title:d_laamp_shumsan = { set_coa = laamp_jawwal_coa }
			title:d_laamp_beni = { set_coa = laamp_beni_coa }
			title:d_laamp_ghilman = { set_coa = ghilman_coa }
			title:d_laamp_lakerats = { set_coa = lakerats_coa }
			title:d_laamp_karakhergit = { set_coa = karakhergit_coa }
			title:d_laamp_eleftheroi = { set_coa = eleftheroi_coa }
			title:d_laamp_forest_people = { set_coa = forest_people_coa }
			title:d_laamp_khergit_1 = { set_coa = laamp_khergit_1 }
		}

		### Some starter for eleftheroi ###
		if = {
			limit = {
				exists = title:d_laamp_eleftheroi
			}
			title:d_laamp_eleftheroi.holder = {
				create_maa_regiment = {
					type = veteran_eleftheroi
					check_can_recruit = no
					size = 6
				}
				create_maa_regiment = {
					type = veteran_eleftheroi
					check_can_recruit = no
					size = 6
				}
				create_maa_regiment = {
					type = veteran_eleftheroi
					check_can_recruit = no
					size = 3
				}
			}
		}
		### Setting up dynamic colours - For Bannerlord startdate ###
		if = {
			limit = {
				current_year = 1084
			}
			title:e_calradian_empire = {
				every_in_de_jure_hierarchy = {
					limit = {
						OR = {
							tier = tier_duchy
							tier = tier_kingdom
						}
					}
					set_variable = dynamic_title_colors_var
				}
				every_in_de_jure_hierarchy = {
					limit = {
						OR = {
							tier = tier_duchy
							tier = tier_kingdom
						}
						NOR = {
							this = title:d_weyard
							this = title:d_charas
							this = title:d_contiere
						}
					}
					set_variable = original_calradian_title_colors_var
				}
			}
			title:k_battania = {
				every_in_de_jure_hierarchy = {
					limit = {
						OR = {
							tier = tier_duchy
							tier = tier_kingdom
						}
					}
					set_variable = dynamic_title_colors_var
				}
			}
			title:k_vlandia = {
				every_in_de_jure_hierarchy = {
					limit = {
						OR = {
							tier = tier_duchy
							tier = tier_kingdom
						}
					}
					set_variable = dynamic_title_colors_var
					set_variable = original_vlandian_title_colors_var
				}
			}
			title:k_wempire_k_3 = {
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_duchy
						OR = {
							this = title:d_weyard
							this = title:d_charas
							this = title:d_contiere
						}
					}
					set_variable = original_vlandian_title_colors_var
				}
			}
		}
		### GRANDEUR ###
		#Royal Court: Set starting Grandeur to be the same as Expected
		if = {
			limit = {
				has_dlc_feature = royal_court
			}
			every_character_with_royal_court = {
				set_current_court_grandeur = court_grandeur_minimum_expected
				apply_hold_court_grace_effect = yes
				# Stops Hold Court reminders at game start
				set_variable = {
					name = last_hold_court_date
					value = current_year
				}
			}
		}
		### Tribal Construction Fixes (Calking - Game Rule)
		if = {
			limit = {
				has_game_rule = ck_tribal_on
			}
			every_province = {
				limit = {
					has_holding_type = tribal_holding
					county.culture = {
						OR = {
							has_cultural_pillar = heritage_battanian
							has_cultural_pillar = heritage_sturgic
							has_cultural_pillar = heritage_byalic
							has_cultural_pillar = heritage_khuzic
						}
						NOT = {
							has_innovation = innovation_feudal_upkeep_tribal
						}
					}
				}
				county.culture = {
					if = {
						limit = {
							NOT = {
								has_innovation = innovation_feudal_upkeep_tribal
							}
						}
						add_innovation = innovation_feudal_upkeep_tribal
					}
				}
			}
		}
		### TITLE FIXES - TEMPORARY FIX UNTIL WE CAN RESOLVE WHY THE RHODOK DUKES ARE INDEPENDENT AT START
		# if = { # This was accidentally pulled in from the Warband branch
		# 	limit = {
		# 		game_start_date = 1257.3.23
		# 	}
		# 	#
		# 	create_title_and_vassal_change = {
		# 		type = swear_fealty
		# 		save_scope_as = rhodok_change
		# 		add_claim_on_loss = no
		# 	}
		# 	# Rhodoks
		# 	character:rhodok_maras_3 = {
		# 		change_liege = {
		# 			liege = title:k_rhodok.holder
		# 			change = scope:rhodok_change
		# 		}
		# 	}
		# 	character:rhodok_maras_6 = {
		# 		change_liege = {
		# 			liege = title:k_rhodok.holder
		# 			change = scope:rhodok_change
		# 		}
		# 	}
		# 	character:rhodok_jamiche_5 = {
		# 		change_liege = {
		# 			liege = title:k_rhodok.holder
		# 			change = scope:rhodok_change
		# 		}
		# 	}
		# 	character:rhodok_jamiche_2 = {
		# 		change_liege = {
		# 			liege = title:k_rhodok.holder
		# 			change = scope:rhodok_change
		# 		}
		# 	}
		# 	# Vaegirs
		# 	character:Sturgia_VH_13 = {
		# 		change_liege = {
		# 			liege = title:e_sturgia.holder
		# 			change = scope:rhodok_change
		# 		}
		# 	}
		# 	# Swadians
		# 	character:swadian_derchios_4 = {
		# 		change_liege = {
		# 			liege = title:k_vlandia.holder
		# 			change = scope:rhodok_change
		# 		}
		# 	}
		# 	resolve_title_and_vassal_change = scope:rhodok_change
		# }
		
		# if = {
		# 	limit = {
		# 		game_start_date = 1257.3.23
		# 	}
		# 	create_title_and_vassal_change = {
		# 		type = swear_fealty
		# 		save_scope_as = rhodok_change_2
		# 	}
		# 	resolve_title_and_vassal_change = scope:rhodok_change_2
		# }
		### STRUGGLES ###
		# if = {
		# 	limit = { current_date = 867.1.1 }

		# 	# Persian Struggle can be reimplemented for future Darshi content
		# }

		### REGENCIES ###
		# Pre-defined historic regencies setup.
		## NOTE: we do these first to avoid feed messages getting weird due to regents being replaced immediately after getting their position.
		## No Regents for Bannerlord or Warband Start Dates ##

		# Set up anyone who should be in a regency at start whether we have sources or not.
		## If you start as a child, incapable, or imprisoned, you get a regency.
		every_ruler = {
			if = {
				limit = {
					OR = {
						is_adult = no
						is_incapable = yes
						is_imprisoned = yes
					}
				}
				# We don't want to check over so many characters *twice*, so we check again inside the block to determine what type of regency to put 'em in.
				## Temporary Regencies.
				if = {
					limit = { is_imprisoned = yes }
					trigger_event = {
						id = diarchy.0001
						delayed = yes
					}
				}
				## Entrenched Regencies.
				else = {
					trigger_event = {
						id = diarchy.0011
						delayed = yes
					}
				}
			}
			if = {
				limit = {
					has_mpo_dlc_trigger = no
				}
				if = {
					limit = {
						has_government = nomad_government
					}
					change_government = tribal_government
				}
				else_if = {
					limit = {
						has_government = herder_government
					}
					change_government = tribal_government
				}
			}
		}

		### FERTILE LANDS ###
		# For deserts that are supposed to be very fertile
		title:c_riqwa = { add_county_modifier = fertile_desert_mountains_modifier }

		### HENDEKAPOLIS ###
		# title:c_ionia = { add_county_modifier = dodekapolis_modifier }
		# title:c_chios = { add_county_modifier = dodekapolis_modifier }
		# title:c_aeolis = { add_county_modifier = dodekapolis_modifier }
		# title:c_lesbos = { add_county_modifier = dodekapolis_modifier }

		### GREECE BACKWATER COUNTIES ### ## CK_COMPATCH
		if = {
			limit = { has_ep3_dlc_trigger = yes }
			title:c_eiopagys = { add_county_modifier = backwater_county_modifier }
			title:c_askagra = { add_county_modifier = backwater_county_modifier }
			title:c_eleutais = { add_county_modifier = backwater_county_modifier }
			title:c_chersis = { add_county_modifier = backwater_county_modifier }
			title:c_vasantina = { add_county_modifier = backwater_county_modifier }
			title:c_monatys = { add_county_modifier = backwater_county_modifier }
			title:c_morgathys = { add_county_modifier = backwater_county_modifier }
			title:c_atrion = { add_county_modifier = backwater_county_modifier }
			title:c_lipathos = { add_county_modifier = backwater_county_modifier }
			title:c_agalmon = { add_county_modifier = backwater_county_modifier }
			title:c_obo = { add_county_modifier = backwater_county_modifier }
			title:c_assinyras = { add_county_modifier = backwater_county_modifier }
		}

		### Imperail Academy IN LYCARON ###
		if = {
			limit = {
				has_ep3_dlc_trigger = yes
				current_date >= 750.1.1
			}
			title:c_lycaron = { add_county_modifier = pandidakterion_university_modifier }
		}


		### Varangian Guard ###
		if = {
			limit = {
				has_ep3_dlc_trigger = yes
				current_date >= 976.8.10
			}
			title:e_calradian_empire = { set_variable = founded_varangian_guard }
		}

		if = {
			limit = {
				has_dlc_feature = hybridize_culture
				NOT = {
					has_dlc_feature = khans_of_the_steppe
				}
			}
			culture:khergit = {
				add_culture_tradition = tradition_malleable_invaders
			}
			culture:arkits = {
				add_culture_tradition = tradition_malleable_invaders
			}
			culture:khuzait = {
				add_culture_tradition = tradition_malleable_invaders
			}
			culture:nachagan = {
				add_culture_tradition = tradition_malleable_invaders
			}
		}

		if = {
			limit = {
				NOT = {
					has_dlc_feature = khans_of_the_steppe
				}
			}
			culture:khergit = { 
				add_culture_tradition = tradition_horse_lords 
				add_culture_tradition = tradition_steppe_tolerance 
			}
			culture:arkits = { 
				add_culture_tradition = tradition_horse_lords 
			}
			culture:khuzait = { 
				add_culture_tradition = tradition_horse_lords 
			}
			culture:nachagan = { 
				add_culture_tradition = tradition_horse_lords 
			}
			#culture:turkish = { add_culture_tradition = tradition_horse_lords }
		}

		### DEBUG GLOBAL VARIABLES ###
		# We set these here so that they present nicely and you can see when some variables register zero.

		# FP3 STRUGGLE (REMOVED)

		# UNITY (NO IRANIAN INTERMEZZO CONTENT)
		
		#LEGITIMACY CONFIG
		# 867.
		if = {
			limit = { game_start_date = 1084.5.1 }
			## Basileus Basileios was actually elected, so he's technically legitimate, but starts at level 2. With this he should be level 3.
			character:Nimp_O_1 = {
				add_legitimacy = game_start_legitimacy_gain
				dynasty = {
					add_dynasty_prestige_level = 2
					add_dynasty_prestige = 150
				}
			}
			character:Simp_P_1 = {
				add_legitimacy = game_start_legitimacy_gain
				dynasty = {
					add_dynasty_prestige_level = 4
					add_dynasty_prestige = 300
				}
			}
			character:Wimp_C_1 = {
				add_legitimacy = game_start_legitimacy_gain
				dynasty = {
					add_dynasty_prestige_level = 1
					add_dynasty_prestige = 75
				}
			}
			character:Battania_FG_1 = {
				add_legitimacy = 700
			}
			character:Sturgia_GR_1 = {
				add_legitimacy = 500
				dynasty = {
					add_dynasty_prestige_level = 1
				}
			}
			character:Aserai_BH_1 = {
				add_legitimacy = game_start_legitimacy_gain
				dynasty = {
					add_dynasty_prestige_level = 2
					add_dynasty_prestige = 100
				}
			}
			character:Khuzait_UK_1 = {
				add_legitimacy = 800
				dynasty = {
					add_dynasty_prestige_level = 2
					add_dynasty_prestige = 80
				}
			}
			character:Nimp_N_1 = {
				dynasty = {
					add_dynasty_prestige_level = 4
					add_dynasty_prestige = 525
				}
			}
		}
		# Cultural setup
		# if = {
		# 	limit = {
		# 		game_start_date = 1178.10.1
		# 	}
		# 	culture:norman = {
		# 		set_name_list = name_list_late_norman
		# 	}
		# }

		### EP3 BYZANTIUM IMPORTANT COUNTIES ###
		# if = {
		# 	limit = { has_ep3_dlc_trigger = yes }
		# 	title:c_antiocheia = {
		# 		set_important_location = {
		# 			title = title:e_calradian_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 		set_important_location = {
		# 			title = title:e_roman_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 	}
		# 	title:c_jerusalem = {
		# 		set_important_location = {
		# 			title = title:e_calradian_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 		set_important_location = {
		# 			title = title:e_roman_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 	}
		# 	title:c_alexandria = {
		# 		set_important_location = {
		# 			title = title:e_calradian_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 		set_important_location = {
		# 			title = title:e_roman_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 	}
		# 	title:c_abbadan = {
		# 		set_important_location = {
		# 			title = title:e_calradian_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 		set_important_location = {
		# 			title = title:e_roman_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 	}
		# 	title:c_edessa = {
		# 		set_important_location = {
		# 			title = title:e_calradian_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 		set_important_location = {
		# 			title = title:e_roman_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 	}
		# 	title:c_bari = {
		# 		set_important_location = {
		# 			title = title:e_calradian_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 		set_important_location = {
		# 			title = title:e_roman_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 	}
		# 	title:c_siracusa = {
		# 		set_important_location = {
		# 			title = title:e_calradian_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 		set_important_location = {
		# 			title = title:e_roman_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 	}
		# 	title:c_roma = {
		# 		set_important_location = {
		# 			title = title:e_calradian_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 		set_important_location = {
		# 			title = title:e_roman_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 	}
		# 	title:c_ravenna = {
		# 		set_important_location = {
		# 			title = title:e_calradian_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 		set_important_location = {
		# 			title = title:e_roman_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 	}
		# 	title:c_tunis = {
		# 		set_important_location = {
		# 			title = title:e_calradian_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 		set_important_location = {
		# 			title = title:e_roman_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 	}
		# 	title:c_tangiers = {
		# 		set_important_location = {
		# 			title = title:e_calradian_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 		set_important_location = {
		# 			title = title:e_roman_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 	}
		# 	title:c_murcia = {
		# 		set_important_location = {
		# 			title = title:e_calradian_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 		set_important_location = {
		# 			title = title:e_roman_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 	}
		# 	title:c_lombardia = {
		# 		set_important_location = {
		# 			title = title:e_calradian_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 		set_important_location = {
		# 			title = title:e_roman_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 	}
		# 	title:c_trier = {
		# 		set_important_location = {
		# 			title = title:e_calradian_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 		set_important_location = {
		# 			title = title:e_roman_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 	}
		# 	title:c_cumberland = {
		# 		set_important_location = {
		# 			title = title:e_calradian_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 		set_important_location = {
		# 			title = title:e_roman_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 	}
		# 	title:c_northumberland = {
		# 		set_important_location = {
		# 			title = title:e_calradian_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 		set_important_location = {
		# 			title = title:e_roman_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 	}
		# 	title:c_chandax = {
		# 		set_important_location = {
		# 			title = title:e_calradian_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 		set_important_location = {
		# 			title = title:e_roman_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 	}
		# 	title:c_tourraine = {
		# 		set_important_location = {
		# 			title = title:e_calradian_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 		set_important_location = {
		# 			title = title:e_roman_empire
		# 			enter_realm_event = ep3_emperor_yearly.2000
		# 		}
		# 	}
		# 	title:c_byzantion = {
		# 		set_important_location = {
		# 			title = title:e_calradian_empire
		# 			enter_realm_event = roman_restoration.1200
		# 		}
		# 		set_important_location = {
		# 			title = title:e_roman_empire
		# 			enter_realm_event = roman_restoration.1200
		# 		}
		# 	}
		# }
		
		# Byzantine name game rule
		# title:e_calradian_empire = {
		# 	if = {
		# 		limit = {
		# 			has_game_rule = eastern_rome_name_of_byzantium
		# 		}
		# 		set_title_name = e_eastern_roman_empire
		# 	}
		# 	else_if = {
		# 		limit = {
		# 			has_game_rule = roman_empire_name_of_byzantium
		# 		}
		# 		set_title_name = e_roman_empire
		# 	}
		# 	else_if = {
		# 		limit = {
		# 			has_game_rule = romania_name_of_byzantium
		# 		}
		# 		set_title_name = e_romania_empire
		# 	}
		# 	else_if = {
		# 		limit = {
		# 			has_game_rule = empire_of_the_greeks_name_of_byzantium
		# 		}
		# 		set_title_name = e_empire_of_the_greeks
		# 	}
		# 	else_if = {
		# 		limit = {
		# 			has_game_rule = rhomaion_name_of_byzantium
		# 		}
		# 		set_title_name = e_rhomaion
		# 	}
		# 	else_if = {
		# 		limit = {
		# 			has_game_rule = unholy_roman_empire_name_of_byzantium
		# 		}
		# 		set_title_name = e_unholy_roman_empire
		# 	}
		# }
		
		# Admin - Let's give existing governors the Governor trait on game start
		every_independent_ruler = {
			limit = { government_allows = administrative }
			every_vassal = {
				limit = {
					is_governor = yes
					NOT = { has_trait = governor }
				}
				add_trait = governor
				add_trait_xp = {
					trait = governor
					value = {
						add = primary_title.title_held_years
						multiply = 2
					}
				}
			}
		}

		# Remove Coronation Doctrine if you don't have the DLC
		if = {
			limit = {
				has_ach_dlc_trigger = no
			}
			every_religion_global = {
				every_faith = {
					remove_doctrine = doctrine_no_anointment
					remove_doctrine = doctrine_anointment_permitted
					remove_doctrine = doctrine_imperial_anointment
				}
			}
		}

		# Set Coronation laws for everyone
		if = {
			limit = {
				has_ach_dlc_trigger = yes
			}
			every_ruler = {
				limit = {
					is_landed = yes
					age >= 12
					highest_held_title_tier >= tier_kingdom
				}
				save_temporary_scope_as = ruler
				if = {
					limit = {
						highest_held_title_tier > tier_kingdom
						NOT = {
							has_any_shunned_or_criminal_trait_in_faith_trigger = {
								CHARACTER = scope:ruler
								FAITH = scope:ruler.faith
							}
						}	
					}
					if = {
						limit = {
							NOT = {
								has_game_rule = coronation_laws_off
							}
						}
						add_realm_law_skip_effects = crowned_emperor
					}
					set_variable = crowned_emperor_var
				}
				else = {
					if = {
						limit = {
							NOT = {
								has_game_rule = coronation_laws_off
							}
						}
						add_realm_law_skip_effects = crowned_king
					}
					set_variable = crowned_king_var
				}
			}
		}

	}
}

# Like on_game_start, except it is called once the host (or player, in single player) exits the lobby. Good for anything where you need to know who the players are, or what the game rules are
on_game_start_after_lobby = {
	effect = {
		# To prevent the Season Changes event from triggering on game start
		situation:the_great_steppe ?= {
			every_participant_group = {
				every_situation_group_participant = {
					set_variable = {
						name = steppe_game_start_var
						years = 1
					}
				}
			}
		}
		# Non-Canon Nomads Rule (region = khuzait_non_canon_nomads )
		if = {
			limit = {
				has_mpo_dlc_trigger = yes
				has_game_rule = ck_non_canon_nomads
			}
			every_county_in_region = {
				region = khuzait_non_canon_nomads

				if = {
					limit = {
						holder = {
							capital_county = {
								any_county_situation = {
									# NOT = {
										situation:the_great_steppe ?= this
									# }
								}
							}
							highest_held_title_tier = tier_county
							government_has_flag = government_is_tribal
							culture = {
								OR = {
									has_cultural_pillar = heritage_lir_ovus
									has_cultural_pillar = heritage_khuzic
								}
							}
						}
					}
					holder = {
						set_variable = {
							name = steppe_game_start_var
							years = 1
						}
						every_held_title = {
							if = {
								limit = {
									title_province = {
										has_holding_type = tribal_holding
									}
								}
								title_province = {
									set_holding_type = nomad_holding
								}
							}
						}
						change_government = nomad_government
					}
				}
			}
		}
		# Duchy Nomads Rule
		if = {
			limit = {
				has_mpo_dlc_trigger = yes
				has_game_rule = ck_duchy_nomads
			}
			situation:the_great_steppe ?= {
				every_situation_county = {
					if = {
						limit = {
							holder = {
								capital_county = {
									any_county_situation = {
										# NOT = {
											situation:the_great_steppe ?= this
										# }
									}
								}
								highest_held_title_tier <= tier_duchy
								government_has_flag = government_is_tribal
								culture = {
									OR = {
										has_cultural_pillar = heritage_lir_ovus
										has_cultural_pillar = heritage_khuzic
									}
								}
							}
						}
						holder = {
							set_variable = {
								name = steppe_game_start_var
								years = 1
							}
							every_held_title = {
								if = {
									limit = {
										title_province = {
											has_holding_type = tribal_holding
										}
									}
									title_province = {
										set_holding_type = nomad_holding
									}
								}
							}
							change_government = nomad_government
						}
					}
				}
			}
		}
		## Whole Khanate
		make_khuzait_khanate_nomadic_effect = yes
		## Damar River
		if = {
		    limit = {
				has_mpo_dlc_trigger = yes
				has_game_rule = the_damar_river_situation_toggle_on
			}
		    start_situation = { 
				type = the_damar_river_situation
				start_phase = situation_steppe_abundant_grazing_season
				save_scope_as = my_situation
				sub_region = {
					key = damariun_nomads_central
					start_phase = situation_steppe_abundant_grazing_season
					map_color = { 155 62 0 }
					geographical_regions = { damariun_nahasan_nomad }
				}
				sub_region = {
					key = damariun_nomads_north
					start_phase = situation_steppe_abundant_grazing_season
					map_color = { 24 155 76 }
					geographical_regions = { damariun_nahasan_nomad_north }
				}
				# sub_region = {
				# 	key = damariun_nomads_north
				# 	start_phase = situation_steppe_abundant_grazing_season
				# 	map_color = { 24 155 76 }
				# 	geographical_regions = { damariun_nahasan_nomad }
				# }
			}
			scope:my_situation = {
				every_situation_county = {
					if = {
						limit = {
							holder = {
								government_has_flag = government_is_tribal
								OR = {
									culture = { has_cultural_pillar = heritage_nahasi }
									culture = culture:tamari
									culture = culture:nahrawi
								}
							}
						}
						holder = {
							set_variable = {
								name = damar_start_var
								years = 1
							}
							every_held_title = {
								if = {
									limit = {
										title_province = {
											has_holding_type = tribal_holding
										}
									}
									title_province = {
										set_holding_type = nomad_holding
									}
								}
							}
							change_government = nomad_government
						}
					}
					else_if = {
						limit = {
							holder = {
								NOT = {
									government_has_flag = government_is_tribal
								}
								OR = {
									culture = { has_cultural_pillar = heritage_nahasi }
									culture = culture:tamari
									culture = culture:nahrawi
								}
							}
						}
						holder = {
							set_variable = {
								name = damar_start_var
								years = 1
							}
						}
					}
				}
			}
		}
		# Extra Nomad Regions
		#Sami
		# if = {
		#     limit = {
		# 		has_mpo_dlc_trigger = yes
		# 		has_game_rule = sami_nomad_region_on
		# 	}
		# 	start_situation = {
		# 		type = game_rule_extra_nomads_sami
		# 		start_phase = situation_steppe_abundant_grazing_season
		# 		save_scope_as = my_situation
		# 	}
		# 	scope:my_situation = {
		# 		every_situation_county = {
		# 			limit = {
		# 				holder = {
		# 					OR = {
		# 						culture = culture:anburian
		# 						culture = culture:musarti
		# 					}
		# 				}
		# 			}
		# 			holder = {
		# 				set_variable = {
		# 					name = steppe_game_start_var
		# 					years = 1
		# 				}
		# 				every_held_title = {
		# 					if = {
		# 						limit = {
		# 							title_province = {
		# 								has_holding_type = tribal_holding
		# 							}
		# 						}
		# 						title_province = {
		# 							set_holding_type = nomad_holding
		# 						}
		# 					}
		# 				}
		# 				change_government = nomad_government
		# 			}
		# 		}
		# 	}
		# }
		#Arabia
		if = {
		    limit = {
				has_mpo_dlc_trigger = yes
				has_game_rule = nahasa_nomad_region_on
			}
			start_situation = {
				type = game_rule_extra_nomads_arabs
				start_phase = situation_steppe_severe_drought_season
				save_scope_as = my_situation
				sub_region = {
					key = arabia_nomads
					start_phase = situation_steppe_severe_drought_season
					map_color = { 34 255 76 }
					geographical_regions = { nahasan_desert_nomad }
				}
				sub_region = {
					key = egypt_nomads
					start_phase = situation_steppe_abundant_grazing_season
					map_color = { 24 155 76 }
					geographical_regions = { nahasan_desert_nomad_east }
				}
			}
			scope:my_situation = {
				every_situation_county = {
					limit = {
						holder = {
							government_has_flag = government_is_tribal
							OR = {
								culture = { has_cultural_pillar = heritage_nahasi }
								culture = culture:nahrawi
								culture = culture:tamari
								is_ai = no
							}
						}
					}
					holder = {
						set_variable = {
							name = steppe_game_start_var
							years = 1
						}
						every_held_title = {
							if = {
								limit = {
									title_province = {
										has_holding_type = tribal_holding
									}
								}
								title_province = {
									set_holding_type = nomad_holding
								}
							}
						}
						change_government = nomad_government
					}
				}
			}
		}	
		#Horn of Africa
		# if = {
		# 	limit = {
		# 		has_mpo_dlc_trigger = yes
		# 		has_game_rule = horn_of_africa_nomad_region_on
		# 	}
		#     start_situation = { 
		# 		type = game_rule_extra_nomads_horn
		# 		start_phase = situation_steppe_severe_drought_season
		# 		save_scope_as = my_situation
		# 	}
		# 	scope:my_situation = {
		# 		every_situation_county = {
		# 			limit = {
		# 				holder = {
		# 					government_has_flag = government_is_tribal
		# 					OR = {
		# 						culture = culture:somali
		# 						culture = culture:beja
		# 						culture = culture:afar
		# 						culture = culture:bedouin
		# 						AND = {
		# 							is_ai = no
		# 							NOR = {
		# 								culture = culture:welayta
		# 								culture = culture:ethiopian
		# 								culture = culture:nubian
		# 								culture = culture:daju
		# 							}
		# 						}
		# 					}
		# 				}
		# 			}
		# 			holder = {
		# 				set_variable = {
		# 					name = steppe_game_start_var
		# 					years = 1
		# 				}
		# 				every_held_title = {
		# 					if = {
		# 						limit = {
		# 							title_province = {
		# 								has_holding_type = tribal_holding
		# 							}
		# 						}
		# 						title_province = {
		# 							set_holding_type = nomad_holding
		# 						}
		# 					}
		# 				}
		# 				change_government = nomad_government
		# 			}
		# 		}
		# 	}
		# }
		every_ruler = {
		### Every nomad in the Steppe Region gets their yurt domicile goodies ###
		if = {
			limit = {
					government_has_flag = government_is_nomadic
					is_landed = yes
				}
				save_scope_as = holder
				if = {
					limit = {
						NOT = {
							any_held_title = {
								is_nomad_title = yes
							}
						}
					}
					create_nomad_title = {
						name = nomad_title_name
						holder = scope:holder
						government = nomad_government
						save_scope_as = new_nomad_title
					}
				}
				if = {
					limit = {
						exists = situation:the_great_steppe
						any_character_situation = {
							this = situation:the_great_steppe
						}
					}
					add_trait = nomadic_philosophy
					dynasty ?= {
						every_dynasty_member = {
							limit = {
								top_liege ?= {
									government_has_flag = government_is_nomadic
								}
							}
							add_trait = nomadic_philosophy
						}
					}
				}
				switch = {
					trigger = primary_title.tier
					tier_county = {
						add_gold = {
							value = {
								value = 0
								add = { 25 40 }
								multiply = gold_value_scale_by_era
							}
						}
					}
					tier_duchy = {
						add_gold = {
							value = {
								value = 0
								add = { 50 80 }
								multiply = gold_value_scale_by_era
							}
						}
						add_realm_law_skip_effects = nomadic_authority_2
						domicile ?= {
							add_domicile_building = yurt_main_02
							add_random_yurt_external_building_effect = yes
							add_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
						}
					}
					tier_kingdom = {
						add_gold = {
							value = {
								value = 0
								add = { 100 125 }
								multiply = gold_value_scale_by_era
							}
						}
						add_realm_law_skip_effects = nomadic_authority_3
						domicile ?= {
							add_domicile_building = yurt_main_02
							add_domicile_building = yurt_main_03
							add_random_yurt_external_building_effect = yes
							add_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
						}
					}
					tier_empire = {
						add_gold = {
							value = {
								value = 0
								add = { 150 200 }
								multiply = gold_value_scale_by_era
							}
						}
						add_realm_law_skip_effects = nomadic_authority_3
						domicile ?= {
							add_domicile_building = yurt_main_02
							add_domicile_building = yurt_main_03
							add_domicile_building = yurt_main_04
							add_random_yurt_external_building_effect = yes
							add_random_yurt_external_building_effect = yes
							add_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
						}
					}
				}
				if = {
					limit = {
						has_royal_court = yes
						NOT = { has_court_type = court_nomadic }
					}
					set_court_type = court_nomadic
				}
				every_councillor = {
					limit = {
						NOR = {
							has_council_position = councillor_spymaster
							has_council_position = councillor_court_chaplain
							has_council_position = councillor_spouse
						}
					}
					prev = { fire_councillor_skip_effects = prev }
					remove_opinion = {
						modifier = fired_from_council_opinion
						target = prev
					}
				}
				random_courtier = {
					limit = {
						is_adult = yes
					}
					save_scope_as = astrologer_character
					prev = {
						appoint_court_position = {
							recipient = scope:astrologer_character
							court_position = court_astrologer_court_position
						}
					}
				}
				if = {
					limit = {
						OR = {
							NOT = { exists = cp:councillor_kurultai_1 }
							NOT = { exists = cp:councillor_kurultai_2 }
							NOT = { exists = cp:councillor_kurultai_3 }
							NOT = { exists = cp:councillor_kurultai_4 }
						}
					}
					ordered_vassal = {
						order_by = current_military_strength
						limit = {
							is_councillor = no
						}
						make_councillor_start_up_effect = yes
					}
				}
				if = {
					limit = {
						OR = {
							NOT = { exists = cp:councillor_kurultai_1 }
							NOT = { exists = cp:councillor_kurultai_2 }
							NOT = { exists = cp:councillor_kurultai_3 }
							NOT = { exists = cp:councillor_kurultai_4 }
						}
					}
					every_knight = {
						limit = {
							is_councillor = no
						}
						make_councillor_start_up_effect = yes
					}
				}
				ordered_councillor = {
					order_by = stewardship
					position = 0
					limit = {
						NOR = {
							has_council_position = councillor_spymaster
							has_council_position = councillor_court_chaplain
							has_council_position = councillor_spouse
						}
					}
					switch = {
						trigger = this
						liege_or_court_owner.cp:councillor_kurultai_1 = {
							set_council_task = {
								task_type = task_kurultai_fertility_1
								target = liege_or_court_owner.capital_province
							}
						}
						liege_or_court_owner.cp:councillor_kurultai_2 = {
							set_council_task = {
								task_type = task_kurultai_fertility_2
								target = liege_or_court_owner.capital_province
							}
						}
						liege_or_court_owner.cp:councillor_kurultai_3 = {
							set_council_task = {
								task_type = task_kurultai_fertility_3
								target = liege_or_court_owner.capital_province
							}
						}
						liege_or_court_owner.cp:councillor_kurultai_4 = {
							set_council_task = {
								task_type = task_kurultai_fertility_4
								target = liege_or_court_owner.capital_province
							}
						}
					}
				}
				ordered_councillor = {
					order_by = learning
					position = 0
					limit = {
						NOR = {
							has_council_position = councillor_spymaster
							has_council_position = councillor_court_chaplain
							has_council_position = councillor_spouse
							is_performing_council_task = task_kurultai_fertility_1
							is_performing_council_task = task_kurultai_fertility_2
							is_performing_council_task = task_kurultai_fertility_3
							is_performing_council_task = task_kurultai_fertility_4
						}
					}
					switch = {
						trigger = this
						liege_or_court_owner.cp:councillor_kurultai_1 = {
							set_council_task = {
								task_type = task_kurultai_court_astrologer_1
								target = liege_or_court_owner.capital_province
							}
						}
						liege_or_court_owner.cp:councillor_kurultai_2 = {
							set_council_task = {
								task_type = task_kurultai_court_astrologer_2
								target = liege_or_court_owner.capital_province
							}
						}
						liege_or_court_owner.cp:councillor_kurultai_3 = {
							set_council_task = {
								task_type = task_kurultai_court_astrologer_3
								target = liege_or_court_owner.capital_province
							}
						}
						liege_or_court_owner.cp:councillor_kurultai_4 = {
							set_council_task = {
								task_type = task_kurultai_court_astrologer_4
								target = liege_or_court_owner.capital_province
							}
						}
					}
				}
				#Nomadic Philosophy lobby added realms
				if = {
					limit = {
						exists = situation:the_great_steppe
						any_character_situation = {
							this = situation:the_great_steppe
						}
						NOT = {
							has_trait = nomadic_philosophy
						}
					}
					add_trait = nomadic_philosophy
					dynasty ?= {
						every_dynasty_member = {
							limit = {
								top_liege ?= {
									government_has_flag = government_is_nomadic
								}
							}
							add_trait = nomadic_philosophy
						}
					}
				}
			}
			else_if = {
				limit = {
					government_has_flag = government_is_herder
				}
				if = {
					limit = { gold >= 30 }
					remove_short_term_gold = 27
				}
				else_if = {
					limit = { gold >= 25 }
					remove_short_term_gold = 22
				}
				else_if = {
					limit = { gold >= 20 }
					remove_short_term_gold = 18
				}
				else_if = {
					limit = { gold >= 15 }
					remove_short_term_gold = 11
				}
				else_if = {
					limit = { gold >= 10 }
					remove_short_term_gold = 5
				}
				# We're fine with them having 10 gold max
				
				if = {
					limit = {
						is_ai = no
					}
					every_held_title = {
						limit = {
							tier = tier_county
							title_province = {
								has_holding_type = herder_holding
							}
						}
						title_province = {
							set_holding_type = nomad_holding
						}
					}
					change_government = nomad_government
				}
			}
			# Make sure that Realm Priests are landed theocrats where it makes sense
			else_if = {
				limit = {
					highest_held_title_tier >= tier_duchy
				}
				if = {
					limit = {
						exists = cp:councillor_court_chaplain
						cp:councillor_court_chaplain = {
							is_ruler = no
						}
						faith = { has_doctrine = doctrine_clerical_succession_spiritual_fixed_appointment }
						any_vassal = {
							is_physically_able_adult = yes
							is_councillor = no
							government_has_flag = government_is_theocracy
							can_be_court_chaplain_trigger = { COURT_OWNER = liege }
							faith = liege.faith
						}
					}
					random_vassal = {
						limit = {
							is_physically_able_adult = yes
							is_councillor = no
							government_has_flag = government_is_theocracy
							can_be_court_chaplain_trigger = { COURT_OWNER = liege }
							faith = liege.faith
						}
						weight = {
							base = 1
							modifier = {
								add = 1000
								faith.religious_head ?= this
							}
							modifier = {
								add = learning
							}
							modifier = {
								add = primary_title.tier
							}
						}
						liege = {
							assign_councillor_type = {
								type = councillor_court_chaplain
								remove_existing_councillor = yes
								target = prev
							}
						}
					}
				}
				if = {
					limit = {
						is_landless_adventurer = yes
					}
					if = { limit = { has_realm_law = crown_authority_0 } remove_realm_law = crown_authority_0 }
				}
			}
			#Autopopulate families.
			if = {
				limit = {
					trigger_if = {
						limit = {
							has_game_rule = on_generate_families_ai_only
						}
						is_ai = yes
					}
					trigger_else = {
						has_game_rule = on_generate_families
					}
				}
				trigger_event = game_rule.1001
			}
		}
		if = {
			limit = {
				has_mpo_dlc_trigger = yes
				game_start_date < 1257.3.23
			}
			#Fully Landlocked Nomad Cultures Setup
			# every_culture_global = {
			# 	limit = {
			# 		OR = {
			# 			has_cultural_pillar = heritage_khiindai
			# 			has_cultural_pillar = heritage_chertygic # CK_REPLACE CK_UPDATE CK_NOMAD CK_NORTHEAST - replace with new northeast Ugro equivalent heritage
			# 		}
			# 	}
			# 	add_to_global_variable_list = {
			# 		name = fully_landlocked_nomad_cultures
			# 		target = this
			# 	}
			# }
			add_to_global_variable_list = {
				name = fully_landlocked_nomad_cultures
				target = culture:khergit
			}
			add_to_global_variable_list = {
				name = fully_landlocked_nomad_cultures
				target = culture:arkits
			}
			add_to_global_variable_list = {
				name = fully_landlocked_nomad_cultures
				target = culture:nachagan
			}
			add_to_global_variable_list = {
				name = fully_landlocked_nomad_cultures
				target = culture:akbeqs
			}
			add_to_global_variable_list = {
				name = fully_landlocked_nomad_cultures
				target = culture:us_darshi
			}
			recalculate_cultural_heads_of_type = herd
		}

		### GAME RULE: VIEW ON SAME-SEX RELATIONS
		if = {
			limit = { has_game_rule = accepted_same_sex_relations }
			game_rule_accepted_same_sex_relations_effect = yes
		}

		### GAME RULE: RANDOM RULER PLACEMENT
		if = {
			limit = { NOT = { has_game_rule = random_ruler_placement_off } }
			game_rule_random_ruler_placement_effect = yes
		}

		### GAME RULE: RANDOMIZE FAITH
		if = {
			limit = { has_game_rule = randomized_faiths_on }
			game_rule_randomize_faith_effect = yes
		}

		### GAME RULE: FAITH ACCEPTANCE
		if = {
			limit = { has_game_rule = full_faith_acceptance }
			game_rule_faith_acceptance_effect = yes
		}

		### GAME RULE: GENDER EQUALITY ###
		if = {
			limit = { has_game_rule = full_gender_equality }
			game_rule_full_gender_equality_effect = yes
		}
		else_if = {
			limit = { has_game_rule = inversed_gender_equality }
			game_rule_inversed_gender_equality_effect = yes
		}

		### GAME RULE: SEXUALITY DISTRIBUTION ###
		if = {
			limit = { NOT = { has_game_rule = sexuality_distribution_default } }
			game_rule_sexuality_distribution_effect = yes
		}
		else = { # So that children 10+ starts with a sexuality
			child_sexuality_distribution_effect = yes
		}

		### GAME RULE: SITUATION TOGGLES
		# struggle:iberian_struggle ?= {
		# 	if = {
		# 		limit = { has_game_rule = struggle_iberia_toggle_off }
		# 		end_struggle = yes
		# 	}
		# }
		# struggle:persian_struggle ?= {
		# 		limit = { has_game_rule = struggle_persia_toggle_off }
		# 		end_struggle = yes
		# 	}
		# }
		situation:the_great_steppe ?= {
			if = {
				limit = { has_game_rule = situation_the_great_steppe_toggle_off }
				end_situation = yes
			}
		}
		situation:the_damar_river_situation ?= {
			if = {
				limit = { has_game_rule = the_damar_river_situation_toggle_off }
				end_situation = yes
			}
		}


		### GAME RULE: RULER OF MUNSTER
		# if = {
		# 	limit = {
		# 		game_start_date = 1066.9.15
		# 		has_game_rule = historicity_ruler_of_munster_historical_toirdelbach
		# 	}
		# 	create_title_and_vassal_change = {
		# 		type = conquest
		# 		save_scope_as = title_change
		# 	}
		# 	character:83355 = {
		# 		every_held_title = {
		# 			limit = { tier >= tier_county }
		# 			change_title_holder = {
		# 				holder = character:906
		# 				change = scope:title_change
		# 			}
		# 		}
		# 		pay_short_term_gold = {
		# 			target = character:83355
		# 			gold = gold
		# 		}
		# 	}
		# 	random_player = {
		# 		limit = { this = character:83355 }
		# 		set_player_character = character:906
		# 	}
		# 	resolve_title_and_vassal_change = scope:title_change
		# 	# Since Murchad is back to his historical self, he gets to suck.
		# 	character:83355 = {
		# 		add_diplomacy_skill = -10
		# 		remove_trait = gregarious
		# 		add_trait = craven
		# 		# Plus, usurpation rivalry — now Toidelbach has a perfectly good claim to the kingdom and will do a lot more with it than Murchad managed in his 5m in power, but by gameplay terms, this _is_ a usurpation.
		# 		set_relation_rival = {
		# 			target = character:906
		# 			reason = rival_usurper
		# 		}
		# 	}
		# 	# Alright, let's give Toirdelbach his alliance.
		# 	character:906 = {
		# 		add_opinion = {
		# 			modifier = perk_negotiated_alliance_opinion
		# 			target = character:922
		# 		}
		# 		reverse_add_opinion = {
		# 			modifier = event_negotiated_alliance_opinion
		# 			target = character:922
		# 		}
		# 		create_alliance = {
		# 			target = character:922
		# 			allied_through_owner = character:906
		# 			allied_through_target = character:922
		# 		}
		# 	}
		# }

		### GAME RULE: DETERMINISTIC CONQUEST
		# if = {
		# 	limit = {
		# 		OR = {
		# 			NOT = { has_game_rule = historicity_norman_conquest_default_random }
		# 			game_rule_rig_norman_conquest_for_hereward_trigger = yes
		# 		}
		# 	}
		# 	set_global_variable = deterministic_conquest_of_england_1066
		# 	# See if we should just teleport our combatants' armies into place.
		# 	trigger_event = {
		# 		id = game_rule.1151
		# 		trigger_on_next_date = 1066.09.25
		# 	}
		# 	trigger_event = {
		# 		id = game_rule.1152
		# 		trigger_on_next_date = 1066.10.14
		# 	}
		# }

		### 867 - MISC ###
		# Basileios has just murdered Michael III.
		# character:1700 ?= { trigger_event = bookmark.0211 }

		### GAME RULE: EXTRA ADMINS
		## We'll be doing some excessive triggers below in a bid to lightly future-proof + error-spam mods less, don't worry about it.
		### We handle players after the lobby.
		# Historic chars.
		apply_historic_administrative_game_rule_effect = yes
		# Players.
		if = {
			limit = { has_dlc_feature = roads_to_power }
			if = {
				limit = {
					NOT = { has_game_rule = historicity_extra_admin_player_wherever_gameplay_not_administrative }
				}
				if = {
					limit = { has_game_rule = historicity_extra_admin_player_wherever_alt_historic_always }
					every_player = {
						limit = {
							highest_held_title_tier >= tier_kingdom
							NOR = {
								government_has_flag = government_is_administrative
								government_has_flag = government_is_landless_adventurer
							}
						}
						convert_to_administrative_from_feudalism_game_start_effect = yes
					}
				}
				else_if = {
					limit = { has_game_rule = historicity_extra_admin_player_wherever_alt_historic_with_august_trait }
					every_player = {
						limit = {
							highest_held_title_tier >= tier_kingdom
							NOR = {
								government_has_flag = government_is_administrative
								government_has_flag = government_is_landless_adventurer
							}
							has_trait = august
						}
						convert_to_administrative_from_feudalism_game_start_effect = yes
					}
				}
			}
		}

		# Give Ruler Designer characters regencies.
		every_in_global_list = {
			variable = rd_chars_needing_regencies
			trigger_event = diarchy.0011
			# Aaaand clean the list.
			save_temporary_scope_as = char_temp
			remove_list_global_variable = {
				name = rd_chars_needing_regencies
				target = scope:char_temp
			}
		}

		### HOLD COURT STARTING GRACE
		every_character_with_royal_court = {
			set_variable = {
				name = hold_court_cooldown
	 			days = standard_hold_court_cooldown_time
	 		}
		}

		#Set starting cultural acceptance
		culture:sturgian = {
			change_cultural_acceptance = {
				target = culture:nord
				value = 35
				desc = cultural_acceptance_historical_relations
			}
			change_cultural_acceptance = {
				target = culture:vakken
				value = 15
				desc = cultural_acceptance_historical_relations
			}
			change_cultural_acceptance = {
				target = culture:iltanlar
				value = 5
				desc = cultural_acceptance_historical_relations
			}
		}
		culture:pamphian = {
			change_cultural_acceptance = {
				target = culture:vlandian
				value = 25
				desc = cultural_acceptance_historical_relations
			}
		}
		culture:darshi = {
			change_cultural_acceptance = {
				target = culture:aserai
				value = 20
				desc = cultural_acceptance_historical_relations
			}
		}
		## CK_UPDATE, This is for a bookmark cultural tolerance/acceptance. Let's readapt this for Warband era 
		# if = {
		# 	limit = { current_date = 867.1.1 }
		# 	# West Slavic.
		# 	culture:pommeranian = {
		# 		change_cultural_acceptance = {
		# 			target = culture:czech
		# 			value = 50
		# 			desc = cultural_acceptance_historical_relations
		# 		}
		# 		change_cultural_acceptance = {
		# 			target = culture:polish
		# 			value = 50
		# 			desc = cultural_acceptance_historical_relations
		# 		}
		# 		change_cultural_acceptance = {
		# 			target = culture:polabian
		# 			value = 50
		# 			desc = cultural_acceptance_historical_relations
		# 		}
		# 		change_cultural_acceptance = {
		# 			target = culture:slovien
		# 			value = 50
		# 			desc = cultural_acceptance_historical_relations
		# 		}
		# 		change_cultural_acceptance = {
		# 			target = culture:carantanian
		# 			value = 50
		# 			desc = cultural_acceptance_historical_relations
		# 		}
		# 		change_cultural_acceptance = {
		# 			target = culture:russian
		# 			value = 50
		# 			desc = cultural_acceptance_historical_relations
		# 		}
		# 		change_cultural_acceptance = {
		# 			target = culture:ilmenian
		# 			value = 50
		# 			desc = cultural_acceptance_historical_relations
		# 		}
		# 		change_cultural_acceptance = {
		# 			target = culture:severian
		# 			value = 50
		# 			desc = cultural_acceptance_historical_relations
		# 		}
		# 		change_cultural_acceptance = {
		# 			target = culture:volhynian
		# 			value = 50
		# 			desc = cultural_acceptance_historical_relations
		# 		}
		# 		change_cultural_acceptance = {
		# 			target = culture:croatian
		# 			value = 50
		# 			desc = cultural_acceptance_historical_relations
		# 		}
		# 		change_cultural_acceptance = {
		# 			target = culture:bosnian
		# 			value = 50
		# 			desc = cultural_acceptance_historical_relations
		# 		}
		# 		change_cultural_acceptance = {
		# 			target = culture:serbian
		# 			value = 50
		# 			desc = cultural_acceptance_historical_relations
		# 		}
		# 		change_cultural_acceptance = {
		# 			target = culture:bulgarian
		# 			value = 50
		# 			desc = cultural_acceptance_historical_relations
		# 		}
		# 	}
		# 	## Volhynian doesn't get its own box, because we've already applied acceptance to it bilaterally everywhere else.
		# }
		

		# Specific innovation unlock
		if = {
			limit = {
				game_start_date >= 976.8.10
			}
			every_culture_global = {
				limit = {
					OR = {
						has_cultural_pillar = heritage_darshi
						this = culture:aserai
					}
				}
				add_innovation = innovation_ghilman
			}
		}
		### CE1 LEGITIMACY SETUP ###
		every_ruler = {
			limit = {
				has_legitimacy = yes
			}
			add_legitimacy = base_legitimacy_value
		}

		###So player-controlled Rhagaea doesn't immediately abandon widow trait
		character:Simp_P_1 = {
		    if = {
		        limit = {
		    	    is_ai = no
		    	}
		    	add_character_flag = {
		    	    flag = recently_widowed
		    		years = 5
		    	}
		    }
		}
		# Give all Wimps, Nimps, and Simps their appropriate faction trait #
		if = {
			limit = {
				AND = {
					game_start_date = 1084.5.1 
					exists = title:e_southern_empire.holder
				}
			}
			title:e_southern_empire.holder = {
				every_vassal = {
					limit = {
						is_ai = yes
						culture = {
							has_cultural_pillar = heritage_calradian
						}
					}
					save_temporary_scope_as = sempire_game_start_vassal
					add_trait = ck_royalist
					if = {
						limit = {
							title:e_southern_empire.holder = {
								NOT = {
									is_rightful_liege_of = scope:sempire_game_start_vassal
								}
							}
						}
						vassal_contract_set_obligation_level = { type = special_contract level = 5 }
					}
				}
			}
		}

		if = { # Special historical events for Vratislav!
			limit = {
				AND = {
					game_start_date = 1084.5.1 
					exists = title:e_northern_empire.holder
				}

			}
			title:e_northern_empire.holder = {
				every_vassal = {
					limit = {
						is_ai = yes
						culture = {
							has_cultural_pillar = heritage_calradian
						}
					}
					save_temporary_scope_as = nempire_game_start_vassal
					add_trait = ck_oligarch
					if = {
						limit = {
							title:e_northern_empire.holder = {
								NOT = {
									is_rightful_liege_of = scope:nempire_game_start_vassal
								}
							}
						}
						vassal_contract_set_obligation_level = { type = special_contract level = 5 }
					}
				}
			}
		}

		if = { # Special historical events for Robert the Fox!
			limit = {
				AND = {
					game_start_date = 1084.5.1 
					exists = title:e_western_empire.holder
				}

			}
			title:e_western_empire.holder = {
				every_vassal = {
					limit = {
						is_ai = yes
						culture = {
							has_cultural_pillar = heritage_calradian
						}
					}
					save_temporary_scope_as = wempire_game_start_vassal
					add_trait = ck_militarist
					if = {
						limit = {
							title:e_western_empire.holder = {
								NOT = {
									is_rightful_liege_of = scope:wempire_game_start_vassal
								}
							}
						}
						vassal_contract_set_obligation_level = { type = special_contract level = 5 }
					}
				}
			}
		}

		### EP3 SETUP ###
		if = {
			limit = { has_ep3_dlc_trigger = yes }
			### EP3 LAAMP SETUP ###
			# Resources.
			every_independent_ruler = {
				limit = { is_landless_adventurer = yes }
				# Cash.
				add_gold = {
					value = {
						value = 0
						add = prestige
						add = piety
						divide = 10
					}
				}
				save_temporary_scope_as = adventurer_scope
				# Set CoA
				primary_title = { set_coa = scope:adventurer_scope.house }
				# Cleanup characters
				every_councillor = {
					if = {
						limit = {
							NOR = {
								has_council_position = councillor_court_chaplain
								has_council_position = councillor_spouse
							}
						}
						scope:adventurer_scope = {
							fire_councillor = prev
						}
						remove_opinion = {
							modifier = fired_from_council_opinion
							target = scope:adventurer_scope
						}
					}
					else_if = {
						limit = {
							NOR = {
								is_close_or_extended_family_of = prev
								has_relation_lover = prev
								has_relation_friend = prev
								is_consort_of = prev
								has_council_position = councillor_spouse
							}
						}
						death = {
							death_reason = death_vanished
						}
					}
				}
				# Evict everyone who isn't your family from your camp.
				every_courtier = {
					limit = {
						prev = { save_temporary_scope_as = char_temp }
						NOR = {
							dynasty ?= scope:char_temp.dynasty
							is_imprisoned_by = scope:char_temp
							# Plus any relations, who are presumably meant to be here.
							has_important_relationship_with_character_trigger = { CHARACTER = scope:char_temp }
							# Catch bastards and such that may be left over.
							is_close_or_extended_family_of = scope:char_temp
						}
					}
					move_to_pool = yes
				}
				# Courtiers.
				if = {
					limit = {
						AND = {
							is_ai = no
							has_game_rule = ck_backstory_enabled
							is_from_ruler_designer = yes
						}
					}
					trigger_event = ck_backstory.0001
				}
				else = {
					trigger_event = ep3_laamps.1001
				}
			}
			# Starting camp purposes.
			character:jawwal_landless_1 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_explorers
				}
			}

			character:ember_laamp_1 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_brigands
				}
			}

			character:west_isle_laamp_barcel ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_brigands
				}
			}

			character:vaegir_laamp_1 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_mercenaries
				}
			}

			character:boar_laamp_1 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_mercenaries
				}
			}

			character:brotherhood_laamp_1 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_brigands
				}
			}

			character:hand_laamp_1 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_brigands
				}
			}

			character:skold_laamp_1 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_mercenaries
				}
				if = {
					limit = {
						is_alive = yes
						NOT = {
							has_character_flag = skolderbroda_male_only
						}
					}
					add_character_flag = skolderbroda_male_only
				}
			}

			character:legion_laamp_1 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_mercenaries
				}
			}

			character:wolf_laamp_1 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_brigands
				}
			}

			character:beni_laamp_1 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_brigands
				}
			}

			character:khergit_laamp_1 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_mercenaries
				}
			}

			character:ghilman_laamp_1 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_mercenaries
				}
			}

			character:forest_laamp_1 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_mercenaries
				}
			}

			character:khergit_laamp_2 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_mercenaries
				}
			}

			character:lakerats_laamp_1 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_brigands
				}
			}

			character:eleftheroi_laamp_1 ?= {
				if = {
					limit = {
						is_alive = yes
						is_landless_adventurer = yes
					}
					add_realm_law_skip_effects = camp_purpose_mercenaries
				}
			}
			every_independent_ruler = {
				if = {
					limit = { is_landless_adventurer = yes }
					# C... food.
					domicile = { change_provisions = starting_provisions_value }
					# Contracts
					if = {
						limit = { is_ai = no }
						# Set up additional firing contracts.
						player_adventurer_contract_generation_on_wait_in_place_effect = yes
						#generate contracts if you are far away from your previous location
						player_adventurer_contract_generation_on_domicile_moved_effect = yes
					}
					else = {
						create_story = { type = story_adventurer_ai }
						trigger_event = {
							on_action = on_adventurer_ai_new_employer_arrival
							days = { 10 30 }
						}
					}
					# Sort our starting flavourisation.
					if = {
						limit = { has_realm_law = camp_purpose_mercenaries }
						set_variable = flavourise_camp_purpose_mercenaries
					}
					else_if = {
						limit = { has_realm_law = camp_purpose_wanderers }
						set_variable = flavourise_camp_purpose_wanderers
					}
					else_if = {
						limit = { has_realm_law = camp_purpose_scholars }
						set_variable = flavourise_camp_purpose_scholars
					}
					else_if = {
						limit = { has_realm_law = camp_purpose_explorers }
						set_variable = flavourise_camp_purpose_explorers
					}
					else_if = {
						limit = { has_realm_law = camp_purpose_brigands }
						set_variable = flavourise_camp_purpose_brigands
					}
					else_if = {
						limit = { has_realm_law = camp_purpose_legitimists }
						set_variable = flavourise_camp_purpose_legitimists
					}
					# And tally our numbers for performance purposes.
					add_to_global_variable_list = {
						name = laamps_tally
						target = this.primary_title
					}
				}
				### EP3 ADMIN SETUP ###
				if = {
					limit = { government_allows = administrative }
					save_scope_as = top_liege
					### EP3 NOBLE FAMILIES & DOMICILE SETUP ###
					random_held_title = { # May be removed once every_noble_family includes liege (TIT-51212)
						limit = { is_noble_family_title = yes }
						set_coa = scope:top_liege.house
					}
					every_noble_family = {
						# Ensure Noble Family CoA match House
						set_coa = holder.house
						# Ensure holders of historical noble family titles are the default house heads
						holder ?= {
							save_scope_as = nf_holder
							if = {
								limit = { is_landed = yes }
								capital_province = { save_scope_as = domicile_location }
							}
							house ?= {
								if = {
									limit = { house_head != scope:nf_holder }
									set_house_head = scope:nf_holder
								}
							}
						}
						set_color_from_title = scope:nf_holder.capital_county
					}
				}
			}
		}
		if = {
			limit = {
				has_game_rule = ck_landed_backstory_enabled
			}
			every_ruler = {
				limit = {
					AND = {
						is_landless_adventurer = no 
						is_from_ruler_designer = yes
						is_ai = no
					}
				}	
				trigger_event = ck_backstory.0001
			}
		}
		# Byzantium naming
		# title:e_calradian_empire = {
		# 	if = {
		# 		limit = {
		# 			has_game_rule = eastern_rome_name_of_byzantium
		# 		}
		# 		set_title_name = e_eastern_roman_empire
		# 	}
		# 	else_if = {
		# 		limit = {
		# 			has_game_rule = roman_empire_name_of_byzantium
		# 		}
		# 		set_title_name = e_roman_empire
		# 	}
		# 	else_if = {
		# 		limit = {
		# 			has_game_rule = romania_name_of_byzantium
		# 		}
		# 		set_title_name = e_romania_empire
		# 	}
		# 	else_if = {
		# 		limit = {
		# 			has_game_rule = empire_of_the_greeks_name_of_byzantium
		# 		}
		# 		set_title_name = e_empire_of_the_greeks
		# 	}
		# 	else_if = {
		# 		limit = {
		# 			has_game_rule = rhomaion_name_of_byzantium
		# 		}
		# 		set_title_name = e_rhomaion
		# 	}
		# 	else_if = {
		# 		limit = {
		# 			has_game_rule = unholy_roman_empire_name_of_byzantium
		# 		}
		# 		set_title_name = e_unholy_roman_empire
		# 	}
		# }
		# Saharan stuff.
		every_county_in_region = {
			region = custom_sahara_proper
			# Every county is in the region, not every province of every county, so we go to county to avoid iterating over every world province _then_ check which ones are in the region.
			every_county_province = { apply_saharan_provisions_debuff_effect = yes }
		}
		# 1066 Buildings
		if = {
			limit = {
				game_start_date >= 976.8.10
				game_start_date < 1257.3.23
			}
			every_province = {
				limit = {
					has_holding = yes
				}
				generate_building = yes
				brewery_counter_start_effect = yes
			}
			every_domicile = {
				if = {
					limit = {
						is_domicile_type = estate
						exists = owner
					}
					if = {
						limit = {
							NOT = { has_domicile_building_or_higher = estate_main_02 }
							owner.culture ?= { has_innovation = innovation_city_planning }
						}
						add_domicile_building = estate_main_02
						add_random_internal_estate_building = yes
					}

					fill_external_estate_building_effect = yes
				}
			}
		}
		# 1178 Buildings
		else_if = {
			limit = {
				game_start_date >= 1257.3.23
			}
			every_province = {
				limit = {
					has_holding = yes
				}
				generate_building = yes
				generate_building = yes
				generate_building = yes
				generate_building = yes
				generate_building = yes
				generate_building = yes
				if = {
					limit = {
						county.development_level >= 8
					}
					generate_building = yes
					generate_building = yes
				}
				if = {
					limit = {
						county.development_level >= 10
					}
					generate_building = yes
				}
				if = {
					limit = {
						county.development_level >= 12
					}
					generate_building = yes
				}
				if = {
					limit = {
						county.development_level >= 14
					}
					generate_building = yes
					generate_building = yes
				}
				if = {
					limit = {
						county.development_level >= 16
					}
					generate_building = yes
				}
				if = {
					limit = {
						county.development_level >= 18
					}
					generate_building = yes
				}
				if = {
					limit = {
						county.development_level >= 20
					}
					generate_building = yes
				}
				if = {
					limit = {
						county.development_level >= 25
					}
					generate_building = yes
					generate_building = yes
					generate_building = yes
				}
				brewery_counter_start_effect = yes
			}
			every_domicile = {
				#if = { # Left in if we want adventurers to spawn with stuff
				#	limit = {
				#		is_domicile_type = camp
				#	}
				#	add_domicile_building = camp_main_02
				#	add_domicile_building = camp_main_03
				#	random_list = {
				#		10 = {
				#			add_domicile_building = supply_tent_01
				#			add_domicile_building = supply_tent_02
				#			random_list = {
				#				10 = {
				#					add_domicile_building = supply_tent_sutler
				#				}
				#				10 = {
				#					add_domicile_building = supply_tent_mender
				#				}
				#				10 = {
				#					add_domicile_building = supply_tent_smithy
				#				}
				#				10 = {
				#					add_domicile_building = supply_tent_arsenal
				#				}
				#			}
				#		}
				#		10 = {
				#			add_domicile_building = barber_tent_01
				#			add_domicile_building = barber_tent_02
				#			random_list = {
				#				10 = {
				#					add_domicile_building = barber_tent_surgeons_tools
				#				}
				#				10 = {
				#					add_domicile_building = barber_tent_dentists_tools
				#				}
				#				10 = {
				#					add_domicile_building = barber_tent_torturers_tools
				#				}
				#			}
				#		}
				#		10 = {
				#			add_domicile_building = baggage_train_01
				#			add_domicile_building = baggage_train_02
				#			random_list = {
				#				10 = {
				#					add_domicile_building = baggage_train_ample_steeds
				#				}
				#				10 = {
				#					add_domicile_building = baggage_train_porters
				#				}
				#				10 = {
				#					add_domicile_building = baggage_train_trackers
				#				}
				#				10 = {
				#					add_domicile_building = baggage_train_kennel
				#				}
				#			}
				#		}
				#	}
				#	random_list = {
				#		10 = {
				#			add_domicile_building = mess_tent_01
				#			add_domicile_building = mess_tent_02
				#			random_list = {
				#				10 = {
				#					add_domicile_building = mess_tent_herbalists
				#				}
				#				10 = {
				#					add_domicile_building = mess_tent_brewers
				#				}
				#				10 = {
				#					add_domicile_building = mess_tent_curers
				#				}
				#				10 = {
				#					add_domicile_building = mess_tent_bakers
				#				}
				#				10 = {
				#					add_domicile_building = mess_tent_cooks
				#				}
				#			}
				#		}
				#		10 = {
				#			add_domicile_building = camp_fire_01
				#			add_domicile_building = camp_fire_02
				#			random_list = {
				#				10 = {
				#					add_domicile_building = camp_fire_trailing_musicians
				#				}
				#				10 = {
				#					add_domicile_building = camp_fire_wandering_poets
				#				}
				#				10 = {
				#					add_domicile_building = camp_fire_capering_fools
				#				}
				#				10 = {
				#					add_domicile_building = camp_fire_libations_for_the_lost
				#				}
				#			}
				#		}
				#	}
				#	random_list = {
				#		10 = {
				#			add_domicile_building = camp_perimeter_01
				#			add_domicile_building = camp_perimeter_02
				#			random_list = {
				#				10 = {
				#					add_domicile_building = camp_perimeter_good_siting
				#				}
				#				10 = {
				#					add_domicile_building = camp_perimeter_fixed_layout
				#				}
				#			}
				#		}
				#		10 = {
				#			add_domicile_building = proving_grounds_01
				#			add_domicile_building = proving_grounds_02
				#		}
				#	}
				#}
				if = {
					limit = {
						is_domicile_type = estate
						exists = owner
					}
					if = {
						limit = {
							NOT = { has_domicile_building_or_higher = estate_main_02 }
							owner.culture ?= { has_innovation = innovation_city_planning }
						}
						add_domicile_building = estate_main_02
						add_random_internal_estate_building = yes
					}
					if = {
						limit = {
							has_domicile_building = estate_main_02
							NOT = { has_domicile_building_or_higher = estate_main_03 }
							owner.culture ?= { has_innovation = innovation_manorialism }
						}
						add_domicile_building = estate_main_03
						while = {
							count = 2
							add_random_internal_estate_building = yes
						}
					}

					fill_external_estate_building_effect = yes
				}
			}
		}
		if = {
			limit = {
				game_start_date >= 1084.5.1
			}
			title:d_laamp_embers = { set_coa = laamp_embers }
			title:d_laamp_boar = { set_coa = laamp_boars }
			title:d_laamp_vaegirs = { set_coa = laamp_vaegirs }
			title:d_laamp_barcel = { set_coa = d_laamp_barcel }
			title:d_laamp_brotherhood = { set_coa = laamp_brotherhood_coa }
			title:d_laamp_hand = { set_coa = laamp_hand_coa }
			title:d_laamp_skold = { set_coa = laamp_skold_coa }
			title:d_laamp_legion = { set_coa = laamp_legion_coa }
			title:d_laamp_wolfskins = { set_coa = laamp_wolfskins_coa }
			title:d_laamp_shumsan = { set_coa = laamp_jawwal_coa }
			title:d_laamp_beni = { set_coa = laamp_beni_coa }
			title:d_laamp_ghilman = { set_coa = ghilman_coa }
			title:d_laamp_lakerats = { set_coa = lakerats_coa }
			title:d_laamp_karakhergit = { set_coa = karakhergit_coa }
			title:d_laamp_eleftheroi = { set_coa = eleftheroi_coa }
			title:d_laamp_forest_people = { set_coa = forest_people_coa }
			title:d_laamp_khergit_1 = { set_coa = laamp_khergit_1 }
		}
		# Purge family titles if Admin isn't enabled
		if = {
			limit = {
				NOT = { has_dlc_feature = roads_to_power }
			}
			every_ruler = {
				save_temporary_scope_as = this_ruler
				every_held_title = {
					limit = {
						has_title_law = noble_family_succession_law
					}
					scope:this_ruler = {
						destroy_title = prev
					}
				}
			}
		}

		every_county_in_region = {
			region = world_steppe
			limit = {
				uses_county_fertility = yes
			}

			if = {
				limit = {
					holder = {
						government_has_flag = government_is_nomadic
					}
					county_fertility > 20
					county_fertility <= 90
				}
				switch = {
					trigger = holder.primary_title.tier
					tier_empire = {
						change_county_fertility = { 16 32 }
					}
					tier_kingdom = {
						change_county_fertility = { 12 16 }
					}
					tier_duchy = {
						change_county_fertility = { 8 12 }
					}
					tier_county = {
						change_county_fertility = { 2 8 }
					}
				}
			}
			else_if = {
				limit = {
					holder = {
						government_has_flag = government_is_herder
					}
				}
				change_county_fertility = { 44 64 }
 			}
		}

		# Conquerors
		# character:144133 ?= {
		# 	if = {
		# 		limit = {
		# 			is_alive = yes
		# 			NOT = { has_game_rule = no_conquerors_frequency }
		# 		}
		# 		create_story = story_conqueror
		# 	}
		# }
		# character:144141 ?= {
		# 	if = {
		# 		limit = {
		# 			is_alive = yes
		# 			NOT = { has_game_rule = no_conquerors_frequency }
		# 		}
		# 		create_story = story_conqueror
		# 	}
		# }
		# character:175080 ?= {
		# 	if = {
		# 		limit = {
		# 			is_alive = yes
		# 			NOT = { has_game_rule = no_conquerors_frequency }
		# 		}
		# 		create_story = story_conqueror
		# 	}
		# }
		# character:226000 ?= {
		# 	if = {
		# 		limit = {
		# 			is_alive = yes
		# 			NOT = { has_game_rule = no_conquerors_frequency }
		# 		}
		# 		create_story = story_conqueror
		# 	}
		
		every_player = {
			limit = {
				is_landed = yes
			}
			while = {
				count = 7
				limit = {
					any_courtier = {
						count < 7
						is_adult = yes
					}
				}
				save_scope_as = player_scope
				random_list = {
					1 = {
						create_character = {
							employer = scope:player_scope
							age = { 20 30 }
							random_traits = yes
							gender_female_chance = scope:player_scope.marriage_gender_adjusted_female_chance
							culture = scope:player_scope.culture
							faith = scope:player_scope.faith
							after_creation = {
								random_list = {
									200 = {
										# Character is of average weight, nothing happens	
									}
									25 = {
										change_current_weight = -25
									}
									25 = {
										change_current_weight = -75
									}
									25 = {
										change_current_weight = 25
									}
									25 = {
										change_current_weight = 75
									}
									5 = {
										change_current_weight = 150
									}
								}
							}
						}
					}
					4 = {
						create_character = {
							employer = scope:player_scope
							age = { 20 40 }
							random_traits = yes
							gender_female_chance = 15
							culture = scope:player_scope.culture
							faith = scope:player_scope.faith
							after_creation = {
								random_list = {
									200 = {
										# Character is of average weight, nothing happens	
									}
									25 = {
										change_current_weight = -25
									}
									25 = {
										change_current_weight = -75
									}
									25 = {
										change_current_weight = 25
									}
									25 = {
										change_current_weight = 75
									}
									5 = {
										change_current_weight = 150
									}
								}
							}
						}
					}
				}
			}
		}
		# }

		# Sanity check the setup if in debug mode
		if = {
        	limit = {
        		debug_only = yes
        	}
	        run_setup_tests_effect = yes
    	}
		
		# House COAs titles exemptions
		if = {
			limit = {
				has_game_rule = ck_titles_coa_house_coa
			}
			title:k_vlandia = {
				set_variable = default_coa_var
			}
			title:k_geroia = {
				set_variable = default_coa_var
			}
			title:k_battania = {
				set_variable = default_coa_var
			}
			title:k_wempire_k_3 = {
				set_variable = default_coa_var
			}
			title:k_aserai = {
				set_variable = default_coa_var
			}
			title:k_thlos = {
				set_variable = default_coa_var
			}
			title:k_rhodok = {
				set_variable = default_coa_var
			}
		}
		# House COAs for titles
		if = {
			limit = {
				has_game_rule = ck_titles_coa_house_coa
			}
			every_ruler = {
				limit = {
					is_landed = yes
					is_lowborn = no
				}
				every_held_title = {
					limit = {
						NOR = {
							tier = tier_empire
							has_variable = default_coa_var
						}
					}
					set_coa = prev.house
				}
			}
		}
		### Setting up appropriate dynasty splendor levels
		## Specific dynasties
		# Vlandian dynasties
		if = {
			limit = {
				game_start_date = 1084.5.1
			}
			dynasty:dynn_dey_meroc = {
				add_dynasty_prestige_level = 2
			}
			dynasty:dynn_dey_rothad = {
				add_dynasty_prestige_level = 2
			}
			dynasty:dynn_dey_folcun = {
				add_dynasty_prestige_level = 2
			}
			dynasty:dynn_dey_jelind = {
				add_dynasty_prestige_level = 2
			}
			dynasty:dynn_dey_molarn = {
				add_dynasty_prestige_level = 2
			}
			dynasty:dynn_dey_valant = {
				add_dynasty_prestige_level = 2
			}
			dynasty:dynn_dey_cortain = {
				add_dynasty_prestige_level = 2
			}
			dynasty:dynn_dey_gunric = {
				add_dynasty_prestige_level = 2
			}
			dynasty:dynn_dey_fortes = {
				add_dynasty_prestige_level = 2
			}
			dynasty:dynn_dey_arromanc = {
				add_dynasty_prestige_level = 2
			}
		}
		# Battanian Dynasties
		if = {
			limit = {
				game_start_date = 1084.5.1
			}
			dynasty:dynn_gruffendoc = {
				add_dynasty_prestige_level = 2
			}
			dynasty:dynn_derngil = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_uvain = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_morcar = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_giall = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_eingal = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_caernacht = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_penraic = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_uthelhain = { 
				add_dynasty_prestige_level = 1
			}
			dynasty:dynn_aedeg = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_dairl = { 
				add_dynasty_prestige_level = 2 
			}
		}
		# Sturgian dynasties 
		if = {
			limit = {
				game_start_date = 1084.5.1
			}
			dynasty:dynn_ubroving = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_vezhoving = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_kuloving = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_kostaroving = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_togaroving = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_isyaroving = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_vagiroving = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_ormidoving = { 
				add_dynasty_prestige_level = 2 
			}
		}
		# Perassic dynasties 
		if = {
			limit = {
				game_start_date = 1084.5.1
			}
			dynasty:dynn_kefalli = { 
				add_dynasty_prestige_level = 1 
			}
			dynasty:dynn_bytessi = { 
				add_dynasty_prestige_level = 2 
			}
		}
		# Khuzait dynasties 
		if = {
			limit = {
				game_start_date = 1084.5.1
			}
			dynasty:dynn_khergit = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_arkit = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_tigrit = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_harfit = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_baltait = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_koltit = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_yanserit = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_oburit = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_dusit = { 
				add_dynasty_prestige_level = 2 
			}
		}
		# Darshi Dynasties 
		if = {
			limit = {
				game_start_date = 1084.5.1 
			}
			dynasty:dynn_darshid = { 
				add_dynasty_prestige_level = 6 
			}
		}
		# Aserai Dynasties
		if = {
			limit = {
				game_start_date = 1084.5.1 
			}
			dynasty:dynn_banu_hulyan = { 
				add_dynasty_prestige_level = 1 
			}
			dynasty:dynn_banu_sarran = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_banu_qild = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_carasios = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_banu_arbas = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_banu_atij = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_banu_sarmal = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_banu_habbab = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_banu_ruwaid = { 
				add_dynasty_prestige_level = 2 
			}
		}
		# Imperial Dynasties
		if = {
			limit = {
				game_start_date = 1084.5.1 
			}
			dynasty:dynn_avlonos = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_hongeros = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_julios = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_leonipardes = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_mestricaros = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_prienicos = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_vetranis = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_vizartos = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_osticos = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_argoros = { 
				add_dynasty_prestige_level = 1 
			}
			dynasty:dynn_chonis = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_dolentos = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_impestores = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_neretzes = { 
				add_dynasty_prestige_level = 1 
			}
			dynasty:dynn_mytophion = { 
				add_dynasty_prestige_level = 1 
			}
			dynasty:dynn_phalentes = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_serapides = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_vatatzes = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_comnos = { 
				add_dynasty_prestige_level = 1 
			}
			dynasty:dynn_corenios = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_dionicos = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_elaches = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_lonalion = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_maneolis = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_palladios = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_sorados = { 
				add_dynasty_prestige_level = 2 
			}
			dynasty:dynn_varros = { 
				add_dynasty_prestige_level = 2 
			}
		}

		set_global_variable = game_has_started
	}

	events = {
		game_rule.1000	#Autopopulate families.
		# game_rule.1011	#Hungarian Migration management.
		historical_artifacts.0023			# Historical Artifacts Generator
		coronation_events.0302 # ACH crown giveaway
	}


}

#$CHARACTER$.house = {
#			save_scope_as = character_house
#
#			add_unity_value = {
#				value = {
#					value = $VALUE$
#					if = { # House heads have a larger impact on unity
#						limit = { house_head = $CHARACTER$ }
#						multiply = unity_house_head_multiplier_value
#					}
#				}
#				character = $CHARACTER$
#				desc = $DESC$
#			}
#		}
