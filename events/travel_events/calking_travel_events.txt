#Generic travel events


@ep3_laamp_flavour_ewan_baggage_train_has_significant_armed_force = 2000

namespace = ck_travel_events

##############################
##  Travel Flavour Events   ##
##############################


ck_travel_events.0001 = { ### Encounter local vulgar commoner
	type = character_event
	title = ck_travel_events.0001.t
	desc = ck_travel_events.0001.desc
	theme = travel
	left_portrait = {
		character = root 
	   	animation = throne_room_conversation_4
	}
	right_portrait = {
		character = scope:local_commoner
		animation = throne_room_conversation_1
	}
	cooldown = { years = 1 }
	trigger = {
		is_available_travelling_adult = yes
		is_landed = yes
		is_travelling = yes
		root.culture = {
			has_cultural_tradition = tradition_high_calradic
		}
		root.location.county = {
			culture = {
				has_cultural_tradition = tradition_vulgar_calradic
			}
		}
	}
	immediate = {
		create_character = {
			template = generic_peasant_character
			location = root.location
			culture = root.location.county.culture
			faith = root.location.county.faith
			save_scope_as = local_commoner
		}
	}
	#Are this people truly Calradians?
	option = {
		name = ck_travel_events.0001.a
		flavor = ck_travel_events.0001.a.t
		
		add_stress = 5
		add_prestige = -10
		
		ai_chance = {
			base = 100
		}
	}
	#Get this mumbling fool out of my way
	option = {
		name = ck_travel_events.0001.b
		flavor = ck_travel_events.0001.b.t
		
		add_prestige = -25
		add_dread = 5
		add_character_modifier = {
			modifier = disrespected_commoners
			months = 6
		}
		root.culture = {
			change_cultural_acceptance = {
				target = scope:local_commoner.culture
				value = -2
				desc = vulgars_disrespected
			}
		}
		ai_chance = {
			base = 0
			modifier = {
				add = 100
				OR = {
					has_trait = arrogant
					has_trait = callous
				}
			}
		}
	}
	#Learning - I wish to be able to understand you
	option = {
		name = ck_travel_events.0001.c
		flavor = ck_travel_events.0001.c.t
		
		trigger = {
			learning >= 13
		}
		
		add_stress = 5
		add_prestige = -5
		add_character_modifier = {
			modifier = wants_to_learn_local_dialects
			months = 18
		}
		ai_chance = {
			base = 50
		}
	}
	#die
	after = {
		if = {
			limit = {
				NOT = {
					scope:local_commoner = { is_courtier_of = root }
				}
				scope:local_commoner = { is_alive = yes }
			}
			scope:local_commoner = {
				silent_disappearance_effect = yes
			}
		}
	}
}

scripted_effect sea_raiders_injuries_ck_effect = {
	random_list = {
		4 = {
			root = {
				send_interface_toast = {
					title = ck_travel_events.0002.tt.wd1
					left_icon = $CKSRWOUND$
					$CKSRWOUND$ = {
						add_trait = wounded_1
					}
				}
			}
		}
		1 = {
			root = {
				send_interface_toast = {
					title = ck_travel_events.0002.tt.wd2
					left_icon = $CKSRWOUND$
					$CKSRWOUND$ = {
						add_trait = wounded_2
					}
				}
			}
		}
		1 = {
			root = {
				send_interface_toast = {
					title = ck_travel_events.0002.tt.ded
					left_icon = $CKSRWOUND$
					$CKSRWOUND$ = {
						death = { death_reason = death_ck_sea_raiders }
					}
				}
			}
		}
	}
	traveler_danger_xp_effect = {
		MIN = 5
		MAX = 15
	}
}

ck_travel_events.0002 = { ### Encounter sea raiders
	type = character_event
	title = ck_travel_events.0002.t
	desc = {
		random_valid = {
			desc = ck_travel_events.0002.desc1
			desc = ck_travel_events.0002.desc2
			desc = ck_travel_events.0002.desc3
			desc = ck_travel_events.0002.desc4
		}
	}
	theme = widgetless_travel_danger
	left_portrait = {
		character = root
		animation = worry
	}
	right_portrait = {
		character = scope:high_prowess_traveller_sr_ck
		animation = shock
	}
	cooldown = { years = 10 }
	trigger = {
		is_available_travelling_adult = yes
		is_travelling = yes
		OR = { #Only in sturgia
			root.location = { geographical_region = minadoria_region }
			root.location = { geographical_region = sturgia_region }
		}
		location = { #Low county control = Sea Raiders able to raid with impunity
			travel_danger_type = {
				travel_plan = root.current_travel_plan
				type = county_control
			}
		}
		NAND = {
			is_landless_adventurer = yes
			current_military_strength >= @ep3_laamp_flavour_ewan_baggage_train_has_significant_armed_force
		}
	}
	immediate = {
		current_travel_plan = {
			ordered_entourage_character = {
				limit = {
					NOT = { this = root }
				}
				order_by = { #search for chad prowess guy
					value = {
						value = prowess
						multiply = 2
					}
				}
				save_scope_as = high_prowess_traveller_sr_ck
			}
			random_entourage_character = { #these three pick at risk targets who could die/get wounded in the event.
				limit = {
					NOT = { this = root }
					AND = {
						NOT = { has_trait = wounded_1 }
						NOT = { has_trait = wounded_2 }
					}
				}
				save_scope_as = atrisk1_sr_ck
			}
			random_entourage_character = {
				limit = {
					NOT = { this = root }
					AND = {
						NOT = { has_trait = wounded_1 }
						NOT = { has_trait = wounded_2 }
					}
					NOT = {
						this = scope:atrisk1_sr_ck
					}
				}
				save_scope_as = atrisk2_sr_ck
			}
			random_entourage_character = {
				limit = {
					NOT = { this = root }
					AND = {
						NOT = { has_trait = wounded_1 }
						NOT = { has_trait = wounded_2 }
					}
					NOR = {
						this = scope:atrisk1_sr_ck
						this = scope:atrisk2_sr_ck
					}
				}
				save_scope_as = atrisk3_sr_ck
			}
		}
	}
	#We have no choice but to fight then...
	option = {
		name = ck_travel_events.0002.a
		flavor = ck_travel_events.0002.a.t
		stress_impact = {
			craven = major_stress_impact_gain
			brave = major_stress_impact_loss
		}
		random_list = {
			25 = { #You win easily!
				desc = ck_travel_events.0002.tt.wineasily
				add_prestige = 100
				traveler_danger_xp_effect = {
					MIN = 1
					MAX = 5
				}
				modifier = {
					current_travel_plan = {	#Large party
						num_entourage_characters > 8 
					}
					factor = 1.4
				}
				modifier = { #Medium Party
					current_travel_plan = {	
						num_entourage_characters < 8
						num_entourage_characters > 4 
					}
					factor = 1.1
				}
				modifier = {
					add = {
						value = 0
						add = prowess
					}
				}
				modifier = {
					add = {
						value = 0
						add = martial
					}
				}
			}
			50 = { #You win, but suffer some losses
				desc = ck_travel_events.0002.tt.winmoderately
				add_prestige = 50
				traveler_danger_xp_effect = {
					MIN = 5
					MAX = 10
				}
				modifier = {
					current_travel_plan = {	#Large party
						num_entourage_characters > 8 
					}
					factor = 1.3
				}
				modifier = { #Medium Party
					current_travel_plan = {	
						num_entourage_characters < 8
						num_entourage_characters > 4 
					}
					factor = 1.3
				}
				modifier = {
					add = {
						value = 0
						add = prowess
					}
				}
				modifier = {
					add = {
						value = 0
						add = martial
					}
				}
				random_list = {
					50 = {
						random_list = {
							4 = {
								add_trait = wounded_1
							}
							1 = {
								add_trait = wounded_2
							}
						}
					}
					50 = {
						desc = ck_travel_events.0002.tt.notinjured
						modifier = {
							add = {
								value = 0
								add = prowess
							}
						}
					}
				}
				hidden_effect = {
					sea_raiders_injuries_ck_effect = { CKSRWOUND = scope:atrisk1_sr_ck }
					sea_raiders_injuries_ck_effect = { CKSRWOUND = scope:atrisk2_sr_ck }
					sea_raiders_injuries_ck_effect = { CKSRWOUND = scope:atrisk3_sr_ck }
				}
			}
			10 = { #You all die.
				desc = ck_travel_events.0002.tt.defeat
				modifier = {
					current_travel_plan = {	#Large party
						num_entourage_characters > 8 
					}
					factor = 0.1
				}
				modifier = { #Small Party
					current_travel_plan = {
						num_entourage_characters < 4
					}
					factor = 10
				}
				modifier = {
					add = {
						value = 0
						subtract = prowess
					}
				}
				death = { death_reason = death_ck_sea_raiders }
				current_travel_plan = {
					every_entourage_character = {
						death = { death_reason = death_ck_sea_raiders }
					}
				}
			}
		}
		ai_chance = {
			base = 100
			modifier = {
				add = -99
				has_trait = craven
			}
			modifier = {
				add = 50
				has_trait = brave
			}
		}
	}
	##(PREVIOUSLY SELECTED TRAVEL GROUP MEMBER), you got this, right?
	#option = {
	#	name = ck_travel_events.0002.b
	#	flavor = ck_travel_events.0002.b.t
	#	
	#	stress_impact = {
	#		craven = major_stress_impact_gain
	#		brave = major_stress_impact_loss
	#	}
	#	ai_chance = {
	#		base = 0
	#		modifier = {
	#			add = 100
	#			OR = {
	#				has_trait = arrogant
	#				has_trait = callous
	#				has_trait = deceitful
	#				has_trait = arbitrary
	#			}
	#		}
	#		modifier = {
	#			add = 1000
	#			has_trait = craven
	#		}
	#	}
	#}
	#Is that my cousin over there?
	option = {
		name = ck_travel_events.0002.c
		flavor = ck_travel_events.0002.c.t
		
		trigger = {
			root.culture = { #Nords can attempt to negotiate
				has_cultural_pillar = heritage_byalic
			}
		}
		random_list = {
			50 = {
				desc = ck_travel_events.0002.tt.cwas_cousin
				add_stress = -25
			}
			50 = {
				desc = ck_travel_events.0002.tt.cwasnt_cousin
				random_list = {
					25 = { #You win easily!
						desc = ck_travel_events.0002.tt.wineasily
						add_prestige = 100
						traveler_danger_xp_effect = {
							MIN = 1
							MAX = 5
						}
						modifier = {
							current_travel_plan = {	#Large party
								num_entourage_characters > 8 
							}
							factor = 1.4
						}
						modifier = { #Medium Party
							current_travel_plan = {	
								num_entourage_characters < 8
								num_entourage_characters > 4 
							}
							factor = 1.1
						}
						modifier = {
							add = {
								value = 0
								add = prowess
							}
						}
						modifier = {
							add = {
								value = 0
								add = martial
							}
						}
					}
					50 = { #You win, but suffer some losses
						desc = ck_travel_events.0002.tt.winmoderately
						add_prestige = 50
						traveler_danger_xp_effect = {
							MIN = 5
							MAX = 10
						}
						modifier = {
							current_travel_plan = {	#Large party
								num_entourage_characters > 8 
							}
							factor = 1.3
						}
						modifier = { #Medium Party
							current_travel_plan = {	
								num_entourage_characters < 8
								num_entourage_characters > 4 
							}
							factor = 1.3
						}
						modifier = {
							add = {
								value = 0
								add = prowess
							}
						}
						modifier = {
							add = {
								value = 0
								add = martial
							}
						}
						random_list = {
							50 = {
								random_list = {
									4 = {
										add_trait = wounded_1
									}
									1 = {
										add_trait = wounded_2
									}
								}
							}
							50 = {
								#desc = ck_travel_events.0002.tt.notinjured
								modifier = {
									add = {
										value = 0
										add = prowess
									}
								}
							}
						}
						hidden_effect = {
							sea_raiders_injuries_ck_effect = { CKSRWOUND = scope:atrisk1_sr_ck }
							sea_raiders_injuries_ck_effect = { CKSRWOUND = scope:atrisk2_sr_ck }
							sea_raiders_injuries_ck_effect = { CKSRWOUND = scope:atrisk3_sr_ck }
						}
					}
					10 = { #You all die.
						desc = ck_travel_events.0002.tt.defeat
						modifier = {
							current_travel_plan = {	#Large party
								num_entourage_characters > 8 
							}
							factor = 0.1
						}
						modifier = { #Small Party
							current_travel_plan = {
								num_entourage_characters < 4
							}
							factor = 10
						}
						modifier = {
							add = {
								value = 0
								subtract = prowess
							}
						}
						death = { death_reason = death_ck_sea_raiders }
						current_travel_plan = {
							every_entourage_character = {
								death = { death_reason = death_ck_sea_raiders }
							}
						}
					}
				}
			}
		}
		ai_chance = {
			base = 50000
		}
	}
}

## Visiting Important Monuments / Cities ##
# Visiting Cities #
# Visiting Monuments #

scripted_trigger ck_travel_events.1002_is_foe_trigger = {
	#every kind of personality which wouldn't mind or self-delude about the river being a bit icky
	 OR = {
		faith = {
			faith_hostility_level = {
				target = scope:lords_liege.faith
				value >= faith_hostile_level
			}
		}
		is_at_war_with = scope:lord_of_geroian_citadel
		liege ?= {
			is_at_war_with = scope:lord_of_geroian_citadel
		}
		top_liege ?= {
			is_at_war_with = scope:lord_of_geroian_citadel
		}
		scope:lord_of_geroian_citadel = {
			liege ?= {
				is_at_war_with = root
			}
		}
		scope:lord_of_geroian_citadel = {
			top_liege ?= {
				is_at_war_with = root
			}
		}
	}
}


ck_travel_events.1002 = {
	type = character_event
	title = ck_travel_events.1002.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					location = {
						has_building = geroian_citadel_ruined
					}
				}
				desc = ck_travel_events.1002.intro_ruined
			}
			desc = ck_travel_events.1002.intro
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					culture = { has_cultural_pillar = language_geroian }
					ck_travel_events.1002_is_foe_trigger = no
				}
				desc = ck_travel_events.1002.geroian
			}
			triggered_desc = {
				trigger = {
					ck_travel_events.1002_is_foe_trigger = no
				}
				desc = ck_travel_events.1002.friend
			}
			desc = ck_travel_events.1002.foe
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					ck_travel_events.1002_is_foe_trigger = no
				}
				desc = ck_travel_events.1002.praise_outro
			}
			triggered_desc = {
				trigger = {
					ck_travel_events.1002_is_foe_trigger = yes
				}
				desc = ck_travel_events.1002.distrust_outro
			}
		}
	}
	theme = travel

	override_background = {
		reference = ep2_travel_settlement_mountains
	}
	left_portrait = {
		character = root 
	   	animation = jockey_walk
		camera = camera_event_horse_left
	}

	trigger = {
		age >= 12
		is_available_travelling = yes
        is_playable_character = yes
		is_location_valid_for_travel_event_on_land = yes
		location = {
			barony = title:b_potenzam
			is_occupied = no
		}
		NOT = { location.county.holder = root } #If I own it then it does not make sense to visit it.
		NOT = { has_character_flag = had_ck_travel_events.1002 }
	}

	immediate = {
		#Make sure the same person doesn't get this twice
		add_character_flag = had_ck_travel_events.1002
		location = {
			save_scope_as = current_location
		}
		location.county.holder = {
			save_scope_as = lord_of_geroian_citadel
		}
		if = {
			limit = {
				exists = scope:lord_of_geroian_citadel.top_liege
			}
			scope:lord_of_geroian_citadel.top_liege = {
				save_scope_as = lords_liege
			}
		}
		else = {
			scope:lord_of_geroian_citadel = {
				save_scope_as = lords_liege
			}
		}
		show_as_tooltip = {
			add_martial_lifestyle_xp = travel_medium_xp
		}
	}

	# These are our defenders and I am proud
	option = {
		trigger = {
			ck_travel_events.1002_is_foe_trigger = no
		}
		name = {
			trigger = {
				culture = { has_cultural_pillar = language_geroian }
			}
			text = ck_travel_events.1002.a_geroian
		}
		name = {
			trigger = {
				NOT = { culture = { has_cultural_pillar = language_geroian } }
			}
			text = ck_travel_events.1002.a_non_geroian
		}
		if = {
			limit = {
				faith = {
					faith_hostility_level = {
						target = scope:lord_of_geroian_citadel.faith
						value < faith_hostile_level
					}
				}
				NOT = {
					is_at_war_with = scope:lord_of_geroian_citadel
				}
				#Need to be in same realm
				OR = {
					liege ?= {
						OR = {
							AND = {
								exists = scope:lord_of_geroian_citadel.liege
								this = scope:lord_of_geroian_citadel.liege
							}
							this = scope:lord_of_geroian_citadel
						}
					}
					scope:lord_of_geroian_citadel = {
						is_vassal_of = root
					}
				}
				culture = { has_cultural_pillar = language_geroian }
			}
			add_opinion = {
				target = scope:lord_of_geroian_citadel
				opinion = 10
				modifier = impressed_opinion
			}
		}
		stress_impact = {
			trusting = minor_stress_impact_loss
			zealous = minor_stress_impact_loss
		}
		ai_chance = {
			base = 100
		}
	}

	# These are our foes and it's ominous
	option = {
		trigger = {
			ck_travel_events.1002_is_foe_trigger = yes
		}
		name = ck_travel_events.1002.b
		add_character_modifier = {
			modifier = haunted_by_hostile_troops_modifier_ck
			years = 1
		}
		
		stress_impact = {
			paranoid = miniscule_stress_impact_gain
			craven = miniscule_stress_impact_gain
		}
		ai_chance = {
			base = 100
		}
	}
}